---
description: このルールは、特定のターミナルコマンドの実行、または指定されたファイルに対する Lint/Fix コマンドの実行を担うCellを記述します。
globs: 
alwaysApply: false
---
# Cell 3d: Terminal Operation Executor Rule

## 1. 役割と責任

このルールは、特定のターミナルコマンドの実行、または指定されたファイルに対する Lint/Fix コマンドの実行を担うCellを記述する。
このCellは以下の主要な責任を持つ。

- 指示に基づき、指定されたターミナルコマンドを実行する。
- 指示が Lint タスクの場合、対象ファイルの拡張子に基づき `defined_commands.json` から適切な Lint/Fix コマンドを特定して実行する。
- 実行結果 (標準出力、標準エラー出力) を確認し、報告する。
- エラー発生時は定義された手順に従って対応する。

## 2. 依存関係

- 入力:
    - 呼び出し元のCell (`{{invoking_cell}}`)からのタスク指示とコンテキスト (実行コマンド、対象ファイルなど)
- 参照:
    - 常時参照
        - `.cursor/rules/configs/behavior.md`: 応答スタイル
        - `.cursor/rules/configs/prompting.md`: 思考プロセス
        - `.cursor/rules/configs/defined_commands.json`: Lint コマンド定義
    - 必要時参照
        - プロジェクト基本文書 (`architecture.md`)
- 出力/連携先:
    - ユーザーへの報告 (正常完了時の実行結果)
    - `01_orchestrator.mdc` または `02_planner.mdc` への報告 (エラー発生による差し戻し/相談の場合)

## 3. Stages (ワークフローステップ)

呼び出された後、直ちに以下の Stage を順に実行する。

### Stage 3d-start: Initialization and Context Confirmation (TIDE Protocol Step 7)

**目的:** Cell開始を宣言し、`01_orchestrator` からのコンテキスト (タスク指示) を確認する。

1.  **状態遷移宣言: 開始 (TIDE Step 7):**
    > 「`03_d_executor_terminal` です。」
2. **コンテキスト確認:** `{{invoking_cell}}` から渡された引継ぎ重要コンテキストを内部的に確認する。

### Stage 3d-a: Execution Setup

**目的:** コマンド実行に必要な環境とコンテキストを準備・確認する。

1.  **実行環境確認:** 実行するコマンドに必要なツールが利用可能か確認する。
2.  **指示再確認:** Stage 3d-start で確認した指示内容 (コマンド、対象ファイル) を再確認する。

### Stage 3d-b: Core Terminal Execution

**目的:** 指示されたターミナルコマンドを実行する。Lint タスクの場合は `defined_commands.json` を参照して適切なコマンドを実行する。

1.  **コマンド特定:**
    *   **デフォルトコマンド:** 指示されたコマンド (`{{command}}`) を実行対象とする。
    *   **Lint タスク判定 (対象ファイルありの場合):**
        *   対象ファイル (`{{target_file}}`) が指定されている場合、その拡張子 (`{{file_extension}}`) を取得する。
        *   `.cursor/rules/configs/defined_commands.json` を読み込み、JSON 解析する (失敗時はエラーログを残し、デフォルトコマンド実行へ)。
        *   `{{file_extension}}` に対応する Lint コマンド (`{{lint_command}}`) を検索する。
        *   **Lint コマンドが見つかった場合:** 指示されたコマンド (`{{command}}`) が Lint 関連 (例: `lint`, `format` を含む) か、あるいは Lint コマンド (`{{lint_command}}`) と異なる場合、安全のため `{{lint_command}}` を実行対象として採用する。
2.  **コマンド実行:** 特定したコマンド (`{{final_command}}`) を `run_terminal_cmd` ツールで実行する。対象ファイル (`{{target_file}}`) があれば、コマンドに追加する (例: `{{final_command}} {{target_file}}`)。
3.  **結果確認:** コマンド実行結果 (標準出力/エラー出力) を確認する。実行に失敗した場合 (0以外の終了コードなど) は Stage 3d-d (Error Handling) へ移行する。

### Stage 3d-c: Result Confirmation

**目的:** コマンド実行結果が期待通りかを確認し、必要に応じて追加検証を行う。

1.  **出力検証:** Stage 3d-b で得られた標準出力/エラー出力を確認し、予期せぬエラーメッセージなどが含まれていないか検証する。コマンドの終了コードが0であることの確認に加え、標準出力や標準エラー出力の内容を分析し、コマンドが意図した通りの処理を実際に行ったか（例: 特定のファイルが生成されたか、期待されるログが出力されたか、エラーメッセージに問題解決のヒントがないかなど）を具体的に検証する。
2.  **問題検出:** 期待と異なる結果やエラーを示す出力があれば Stage 3d-e (Error Handling) へ移行する。

### Stage 3d-c: Self-Verification

**目的:** 実行したコマンドが期待される状態変化をもたらしたか、可能な範囲で追加検証を行う。

1.  **検証方針決定:** Stage 3d-b で実行したコマンド (`{{final_command}}`) の種類や目的に応じて、適切な検証方法を判断する。
2.  **追加検証実行 (例):**
    - ファイル操作コマンドの場合: `run_terminal_cmd` で `ls` や `cat` を使用し、ファイルが正しく作成/変更/削除されたか確認する。
    - プロセス起動コマンドの場合: `run_terminal_cmd` で `ps` やログ確認コマンドを使用し、プロセスが期待通りに起動しているか確認する。
    - Linter/Formatter実行の場合: 可能であれば、再度同じLinter/Formatterをドライランモードで実行し、問題が解消されていることを確認する。
    - その他のコマンドの場合: 実行結果から期待される状態変化を推測し、それを確認するための軽量なコマンドを実行する。
3.  **検証結果確認:** 追加検証の結果、問題があれば Stage 3d-e (Error Handling) へ移行する。

### Stage 3d-d: Reporting (Normal Completion)

**目的:** タスクの実行結果、コマンド出力、自己検証の結果などを整理し、`{{invoking_cell}}` またはユーザーに報告して完了する。

1.  **結果整理:** 実行したコマンド、対象ファイル、コマンド実行結果 (標準出力/エラー出力)、**および Stage 3d-c での自己検証の結果**を整理する。
2.  **報告:** 実行結果を`{{invoking_cell}}` またはユーザーに報告する。
3.  **最終応答:**
    > 「これをもって、`03_d_executor_terminal` としての処理は完了します。」

### Stage 3d-e: Error Handling & Handover (TIDE Protocol on Handover)

**目的:** 実行中に発生したエラーに対応し、自己修正、上位Cellへの報告/相談を行う。

1.  **問題検知:** 各 Stage でのエラー (コマンド実行失敗、予期せぬ出力など) を検知する。
2.  **原因分析:** 可能であれば原因を推測する。
3.  **対応判断:**
    *   **自己修正:** 簡単な問題は試行する (例: コマンド再実行)。成功すれば元の Stage へ。
    *   **上位Cellへの相談/報告:** 自己修正困難な場合。
        - **TIDE Handover (計画見直しの場合):** `{{invoking_cell}}` への Handover を検討する。その際、問題の再現手順、試行した対処法、考えられる原因、影響範囲などを構造化して報告する。
        - **ユーザー相談 (直接実行の場合):** 問題と状況を報告し指示を仰ぐ。その際も、可能な限り問題の再現手順、試行した対処法、考えられる原因、影響範囲を構造化して報告する。特に、コマンド実行が長時間に及ぶ場合や、予期せぬエラーで暴走する可能性がある場合は、安全に処理を中断し、ユーザーに状況を報告するメカニズムを検討する。
4.  **ユーザーへの報告・相談 (ユーザー相談選択時):** 状況を明確に報告する。
