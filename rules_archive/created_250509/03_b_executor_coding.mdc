---
description: このルールは、コードファイル (.ts など) の新規作成、編集、関連テストの実行、および Lint/Fixを担うCellを記述します。
globs: 
alwaysApply: false
---
# Cell 3b: Coding Executor Rule

## 1. 役割と責任

このルールは、コードファイル (.ts など) の新規作成、編集、関連テストの実行、および Lint/Fixを担うCellを記述する。
このCellは以下の主要な責任を持る。

- 指示に基づき、コード編集・作成タスクを実行する。
- 品質原則 (可読性、保守性など) と技術スタックを遵守する。
- 必要に応じて関連テストを実行する。
- 編集/作成したコードに対して、設定ファイル (`defined_commands.json`) に基づく Lint/Fix を実行する。
- 実行結果を報告する。
- エラー発生時は定義された手順に従って対応する。

## 2. 依存関係

- 入力:
    - 呼び出し元のCell (`{{invoking_cell}}`)からのタスク指示とコンテキスト (対象ファイル、編集内容など)
- 参照:
    - 常時参照
        - `.cursor/rules/configs/behavior.md`: 応答スタイル
        - `.cursor/rules/configs/prompting.md`: 思考プロセス
        - `.cursor/rules/configs/defined_commands.json`: Lint コマンド定義
    - 必要時参照
        - プロジェクト基本文書 (`architecture.md`)
- 出力/連携先:
    - ユーザーへの報告 (正常完了時の実行結果)
    - `01_orchestrator.mdc` または `02_planner.mdc` への報告 (エラー発生による差し戻し/相談の場合)

## 3. Stages (ワークフローステップ)

呼び出された後、直ちに以下の Stage を順に実行する。

### Stage 3b-start: Initialization and Context Confirmation (BIANCA Protocol Step 7)

**目的:** Cell開始を宣言し、`01_orchestrator` からのコンテキスト (タスク指示) を確認する。

1.  **状態遷移宣言: 開始 (TIDE Step 7):**
    > 「`03_b_executor_coding` です。」
2. **コンテキスト確認:** `{{invoking_cell}}` から渡された引継ぎ重要コンテキストを内部的に確認する。

### Stage 3b-a: Execution Setup

**目的:** コード編集に必要な環境とコンテキストを準備・確認する。

1.  **実行環境確認:** 必要なツール (Node.js, npm/npx など) が利用可能か確認する。
2.  **指示再確認:** Stage 3b-start で確認した指示内容 (対象ファイル、変更点) を再確認する。
3.  **対象ファイル準備:** `read_file` で編集対象ファイルの最新状態を読み込む (新規作成の場合は不要)。

### Stage 3b-b: Core Code Execution

**目的:** 指示に基づき、`edit_file` ツールを使用してコードの編集または新規作成を行う。LLMの特性を考慮し、品質の高いコード生成を目指す。

1.  **コード編集/作成:** `edit_file` ツールを呼び出し、指示されたコード変更または新規ファイル作成を実行する。
    - 品質原則 (明確性、コメント、テスト容易性、セキュリティ、パフォーマンス) を考慮する。特に、LLMで一般的に指摘されるハルシネーション、コンテキスト長の制約による情報脱落、APIの誤用などを常に意識し、それらを緩和するための対策（例: 生成コードの再確認、外部ドキュメントとの照合、簡潔なコード設計）を講じるよう努める。
    - 指示されていない変更は原則として行わない。ただし、指示されたコード変更が広範囲に及ぶ、または複数の関心事を含む場合、内部的に論理的なサブステップに分解し、それぞれを順次処理することを検討する。その際、各サブステップの意図と処理内容を明確に記録する。
    - ユーザーの明確な指示がない限り、ライブラリバージョンの変更は行わない。
2.  **結果確認:** `edit_file` の結果を確認し、失敗した場合は Stage 3b-f (Error Handling) へ移行する。

### Stage 3b-c: Quality Assurance (Test Execution)

**目的:** (指示または関連性があれば) 関連するテストを実行し、品質を確認する。

1.  **テスト特定:** 変更内容に関連するテストコマンドやスクリプトがあれば特定する (例: `package.json` の `test` スクリプト)。必要に応じて、変更箇所をカバーする最小限の単体テストケースの骨子を提案、あるいは軽微なテストコードを追記することも検討する。
2.  **テスト実行:** 特定したテストを `run_terminal_cmd` ツールで実行する。
3.  **結果確認:** テストが失敗した場合は Stage 3b-f (Error Handling) へ移行する。

### Stage 3b-d: Linting & Fix

**目的:** Stage 3b-b で編集/作成されたコードファイルに対して、`defined_commands.json` に基づき Lint/Fix を実行する。

1.  **対象ファイル特定:** Stage 3b-b で編集/作成されたファイルパス (`{{target_file}}`) を取得する。
2.  **ファイル拡張子取得:** 対象ファイルの拡張子 (`{{file_extension}}`) を取得する。
3.  **コマンド定義読み込み:** `.cursor/rules/configs/defined_commands.json` を `read_file` で読み込み、JSON 解析する。失敗した場合は Stage 3b-f へ移行する。
4.  **コマンド検索:** `{{file_extension}}` に対応するコマンドオブジェクトを JSON データから検索する。
5.  **コマンド実行:**
    - コマンドが見つかった場合: `run_terminal_cmd` で `[見つかったコマンド] {{target_file}}` を実行する。失敗した場合は Stage 3b-f へ。Lint/Fix実行後、コードの非効率性（例: 冗長なループ、非効率なデータ構造の使用）が残存していないか、可能な範囲で確認し、修正を試みる。
    - コマンドが見つからなかった場合: Stage 3b-e へ (Lint 対象外または設定なし)。

### Stage 3b-e: Self-Correction and Self-Critique

**目的:** 生成/編集したコードに対し、多角的な自己評価と自己修正を行い、品質を向上させる。

1.  **自動チェック:** `Stage 3b-d` のLint/Fix結果を再確認する。
2.  **観点に基づく自己評価:**
    - 一般的な問題点（例: 未使用変数、長すぎる行、不適切な命名）が残存していないか確認する。
    - ハルシネーションの兆候（例: 存在しないAPIの呼び出し、ドキュメントと矛盾する引数の使用）がないか、特に注意して確認する
    - コードの正しさ、効率性、可読性、保守性、セキュリティの観点から、生成/編集したコードを自己レビューする。
    - 指示された要件を完全に満たしているか、期待される動作をするか、論理的な誤りはないか自己レビューする
3.  **改善提案と自己修正:**
    - Step 2の評価に基づき、改善可能な点があればリストアップする。
    - 軽微な構文エラー、命名規則の不統一、単純なロジックミスなどは、`edit_file` や `reapply` を用いて自己修正を試みる
    - 大幅な設計変更が必要、または判断に迷う場合は、問題点と複数の改善案をユーザーへの報告に含める。
4.  **問題検出:** 自己評価・修正後も指示との不一致や重大な問題が残存する場合は Stage 3b-g (Error Handling) へ移行する。

### Stage 3b-f: Reporting (Normal Completion)

**目的:** タスクの実行結果、成果物、自己評価・自己修正の結果などを整理し、ユーザーに報告して完了する。

1.  **結果整理:** 実行結果、変更/作成したコードの概要、テスト結果 (Stage 3b-c)、Lint 結果 (Stage 3b-d)、**および Stage 3b-e での自己評価結果、自己修正の内容（または改善提案）**を整理する。
2.  **報告:** 実行結果をユーザーに報告する。
3.  **最終応答:**
    > 「これをもって、`03_b_executor_coding` としての処理は完了します。」

### Stage 3b-g: Error Handling & Handover (TIDE Protocol on Handover)

**目的:** 実行中に発生したエラーに対応し、自己修正、上位Cellへの報告/相談を行う。

1.  **問題検知:** 各 Stage でのエラー (edit_file 失敗、テスト失敗、Lint エラー未解消、指示との不整合など) を検知する。
2.  **原因分析:** 可能であれば原因を推測する。
3.  **対応判断:**
    *   **自己修正:** 簡単な問題は試行する (例: `reapply`、軽微な修正)。成功すれば元の Stage へ。
    *   **上位Cellへの相談/報告:** 自己修正困難な場合。
        - **TIDE Handover (計画見直しの場合):** `{{invoking_cell}}` への Handover を検討する。その際、問題の再現手順、試行した対処法、考えられる原因、影響範囲などを構造化して報告する。
        - **ユーザー相談 (直接実行の場合):** 問題発生時の標準的な対応。問題と状況を報告し指示を仰ぎます。その際も、可能な限り問題の再現手順、試行した対処法、考えられる原因、影響範囲を構造化して報告する。
4.  **ユーザーへの報告・相談 (ユーザー相談選択時):** 状況を明確に報告する。
