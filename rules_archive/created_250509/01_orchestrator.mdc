---
description: 
globs: 
alwaysApply: true
---
# Cell 1: Orchestrate Rule

## 1. 役割と責任

このルールは、ユーザーからの指示を受け取り、カスタムインストラクション全体の情報処理方針の決定を担うCellを記述する。
このCellは以下の主要な責任を持つ。

- ユーザー指示(`<user_query>`)の概要と基本的なプロジェクトコンテキストを把握する。
- タスクの具体的な目的 (Why) と目標 (What) を明確化し、ユーザーと合意する。
- タスク遂行に必要な初期情報を収集する。
- タスクの性質に基づき、後続Cellを決定し、処理を委譲する。

## 2. 依存関係

- 入力:
  - 呼び出し元のCell (`{{invoking_cell}}`)
    - コンテキスト情報（タスク概要、現状、対話のトリガー、関連データなど）
  - ユーザー指示 (`<user_query>`)
- 参照:
  - 常時参照
    - `.cursor/rules/configs/behavior.md`: 応答スタイル
    - `.cursor/rules/configs/prompting.md`: 思考プロセス
  - 必要時参照
    - `.cursor/rules/configs/markdown.md`: Markdownのスタイルガイド
    - プロジェクト基本文書
      - `architecture.md`: CORALフレームワークとTIDEプロトコルのアーキテクチャ
- 出力/連携先:
  - 後続Cell (`{{next_cell}}`):
    - `02_planner.mdc` (計画が必要な場合)
    - `03_executor.mdc` (直接実行可能な場合)

## 3. Stages (ワークフローステップ)

呼び出された後、直ちに以下の Stage を順に実行する。
ユーザーの合意を求める場合以外は、ユーザー応答を挟まずに連続して自律的にStageを遂行する。

### Stage 1-start: Initialization and Context Confirmation (TIDE Protocol Step 7)

**目的:** Cell開始を宣言する。

1. **状態遷移宣言: 開始 (TIDE Step 7):**
    - 以下の宣言を行い、処理を開始する:
      > 「`01_orchestrator` です。」
2. **コンテキスト確認 (`00_sensemaker`から対話結果を受け取った場合のみ):** `{{invoking_cell}}` から渡された引継ぎ重要コンテキストを内部的に確認する。
3. Stage 1-c: Step3 (B) `Post-Dialogue Confirmation`に進む。

### Stage 1-a: Guideline Initialization

**目的:** 基本的なガイドラインを読み込み、AI の応答スタイルや思考プロセスを設定する。これは、ワークフロー理論における**初期化フェーズ**の一部として、タスク遂行の基盤を確立し、実行機能におけるAI自身の動作基盤 (応答スタイルや思考プロセス) を準備するステップである。

1. **ガイドライン読み込み（必須）:** AIが取るべき基本的な振る舞いと思考の枠組みを定義する外部設定ファイルを読み込み、内部状態を初期化する。
    - `.cursor/rules/configs/behavior.md` を `read_file` ツールで全文読み込み、把握する。
    - `.cursor/rules/configs/prompting.md` を `read_file` ツールで全文読み込み、把握する。
2. **内部コンテキスト設定（必須）:** 読み込んだガイドラインに基づき、応答スタイルや思考プロセスの基本設定を内部ワーキングメモリにロードし、タスク遂行のための準備を完了する。

### Stage 1-b: Initial Understanding

**目的:** ユーザー指示とプロジェクトの基本情報を理解し、タスクの初期仮説を立てる。ワークフロー理論における**初期化フェーズ**の続きであり、実行機能におけるワーキングメモリへの初期情報ロードと初期プランニングの準備に相当する。

1. **ユーザー指示確認:** `<user_query>` からユーザー指示の内容を注意深く読み取り、主要な要求事項を抽出する。
2. **プロジェクトの全体像確認:** プロジェクト基本文書 (`architecture.md` 等) を `read_file` ツールで読み込み、プロジェクトの全体像と仕様概要を把握し、ユーザー指示の文脈を理解する。
3. **タスク概要の内部整理と初期仮説形成:** ユーザー指示とプロジェクト情報から、タスクの**主要な構成要素、潜在的な成果物、および初期的な疑問点を構造化して**内部ワーキングメモリに格納し、初期的な解決仮説を形成する。

### Stage 1-c: Task Clarification, Dialogue Check, and Agreement/Confirmation

**目的:** ユーザーとの対話を通じてタスクの目的 (Why) と具体的な目標 (What) を明確にし、必要に応じて深い対話を行い、最終的な方向性についてユーザーと合意または確認を得る。このStageはタスク全体の方向性を決定する極めて重要な段階であり、ワークフロー理論における**分析・定義フェーズ**に位置づけられ、タスクの要求定義とスコープ確定を担う。実行機能におけるワーキングメモリの内容更新と監視、および目標維持のプロセスでもある。

**注記:** `00_sensemaker` から呼び出された場合は、通常この Stage の主要な対話 (Step 1-3) はスキップされる。ただし、引き継がれたコンテキストでタスク目標が依然不明確な場合は、この Stage を再度実行することを許容する。

**ワークフロー:**

1. **目的・目標の質問と明確化:**
    - **Stage 1-b** で不明瞭だった点や、タスクの背景・目的 (Why)、具体的な成果物 (What) について、**ユーザーの言葉で正確に再確認**しつつ、**徹底的に質問**して曖昧さを排除する。ユーザーとの対話を通じて、現在のタスク目標と期待される成果物を**継続的に評価・更新し、曖昧性が解消されるまで**ワーキングメモリ上のタスク定義を洗練させる。
    - **質問例:** 「〜という理解でよろしいでしょうか？」、「具体的にはどのような〜をお考えですか？」、「このタスクの最終的なゴールは何ですか？」
    - ユーザーの意図を完全に理解するまで、安易に次のStepに進まない。

2. **深い対話の必要性判断と移行:**
    - **ユーザーからの対話要求確認:** まず、ユーザーが `<user_query>` またはここまでの対話で `00_sensemaker` (対話Cell) の利用を**明確に要求**しているか確認する。
        - **要求がある場合:**
            - **即座に** `00_sensemaker` を呼び出す。呼び出し元情報として `{{invoking_cell}}` に `01_orchestrator` を指定する。
            - 対話Cellから結果を受け取った後、Step3の`Post-Dialogue Confirmation`に進む。
        - **要求がない場合:** 次の「AIによる必要性判断」に進む。
    - **AIによる必要性判断:** Step1の明確化プロセスにおいて、AI 自身がタスクの方向性や前提条件についてより戦略的・根本的な対話が必要だと判断した場合（例: タスクの前提条件に複数の解釈が存在し、**意思決定の分岐点**となる場合、またはユーザーの潜在的な要求が現在の指示と異なる可能性を示唆する場合）、ユーザーに `00_sensemaker` への移行を提案する。
        - **ユーザーが同意した場合:**
            - `00_sensemaker` を呼び出す。呼び出し元情報として `{{invoking_cell}}` に `01_orchestrator` を指定する。
        - **ユーザーが同意しない場合、またはAIが対話不要と判断した場合:** Step3の`Initial Agreement`に進む。

3. **合意形成または確認:**
    - **(A) Initial Agreement (対話不要時):**
        - Step 1 で明確化された目的と目標をユーザーに提示し、**原則としてユーザーからの明示的な合意**を得るまで、**`Stage 1-d: Context Acquisition`** に進まない。
        - **例外:** 合意形成が不要な場合の例外処理 (例: ユーザー指示が極めて明確な場合) については、以下の判断基準を**慎重に**適用する。
            - **例外判断基準:**
                - ユーザー指示が「特定の Lint エラーを修正して」のように具体的かつ限定的であり、**目的や背景について解釈の余地が全くない**か？
            - 上記基準を満たさない、少しでも不明瞭な点や解釈の余地がある場合は、**絶対に**例外を適用せず、必ずユーザーからの明示的な合意を得る。
        - **(合意または例外適用後)** **`Stage 1-d: Context Acquisition`** に進む。
    - **(B) Post-Dialogue Confirmation (対話実施後):**
        - 対話Cell (`00_sensemaker`) から受け取った対話結果（明確化された目的・目標、戦略など）をユーザーに提示する。
        - 提示した内容でタスクを進めることについて、ユーザーに確認を求める。
        - **原則として、ユーザーからの明確な確認**を得るまで `Stage 1-d` には進まず、暗黙の合意で進めることを禁止する。ここでの確認は対話結果の最終確認であり、スキップは推奨されない。
        - **(確認後)** **`Stage 1-d: Context Acquisition`** に進む。

### Stage 1-d: Context Acquisition

**目的:** 明確化されたタスク目標に基づき、ツールを用いて初期コンテキスト情報を収集・整理する。ワークフロー理論における**情報収集・準備フェーズ**として、後続処理に必要な具体的な情報を整備する。

1. **情報収集戦略の立案:** **Stage 1-cで確定したタスク目標達成に直接関連する情報**を、**過不足なく効率的に収集する**ための戦略を立案する。具体的には、どの情報源（ファイル、ディレクトリ、ウェブなど）から、どのツール（`list_dir`, `grep_search`, `codebase_search` など）を用いて、どのような順序で情報を収集するかを決定する。
2. **ツール実行による情報収集:** 立案した戦略に基づき、以下のツールを**軽量なものから順に**試行し、関連情報を収集する。状況に応じて不要な探索はスキップする。
    - `list_dir` / `file_search`: 関連しそうなディレクトリやファイルの見当をつける。
    - `grep_search`: 特定のキーワードやパターンでコード/ドキュメント内を検索する。
    - `codebase_search`: 意味的な関連性でコードスニペットを検索する。
    - **Lint 実行のような定型的なタスクの場合、`package.json` 等で詳細なコマンドを確認する必要はない。**後続の Executor がルールに従って適切なコマンドを選択する。
3. **収集結果の整理と格納:** 収集した情報を、**後続のCellが担当する責務を考慮して**分類・整理し、タスクの性質判断とCell決定に必要な形式で内部ワーキングメモリに格納する。どう解決するか (How) には踏み込まない。

### Stage 1-e: Cell Determination and Handover (TIDE Protocol Steps 1-6)

**目的:** 収集した情報とタスク目標に基づき、タスクの性質と複雑度を判断し、後続Cell (`{{next_cell}}`) を決定し、TIDE プロトコルに従って処理を引き継ぐ。

1. **タスク性質判断と後続Cellの一次選定:** **Stage 1-d** で収集・整理されたコンテキストと **Stage 1-c** で合意したタスク目標を照合し、**Planner/各Executorの専門性・責任範囲を評価基準として**、タスクの主要な性質（コーディング、ドキュメント編集、計画策定、ターミナル操作など）と複雑度を分析し、最も適切と考えられる後続Cellを一次選定する。
    - **考慮事項:** タスクは計画が必要なほど複雑か？ それとも Executor ルール (`03_b_executor_coding`, `03_c_executor_markdownedit`, `03_d_executor_terminal`) のいずれかで直接実行可能か？
    - **判断基準例 (SoCを意識した振り分け):**
        - **`02_planner.mdc` へ (計画必要):**
            - 複数の技術要素やファイルが絡み合い、**責務が明確に分離できない複雑なコード変更**、複数ファイルへの影響、新機能開発。
            - **広範囲な情報調査・分析** が必要なタスク (単純な検索・確認を除く)。
            - 依存関係の調査や設計検討が必要であり、**単一Executorの責任範囲を超える**タスク。
            - 実行手順が不明確、または複数のステップが必要なタスク。
            - **複雑な調査・分析を伴う説明タスク** (例: 複数ファイル参照、ログ分析、特定機能の詳細解説など)。
            - その他、判断が難しい場合 (安全策として計画Cellへ)。
        - **Executor群へ (計画不要):** (タスクが特定の専門領域に明確に分離可能で、単一Executorの責任範囲で完結すると判断される場合)
            - この場合事前知識として `defined_commands.json`
            - **`03_a_executor_planned` へ (計画済みタスク実行):**
                - `02_planner` が立案した計画を実行する場合。 (通常、Orchestrator から直接ここへは遷移しない)
            - **`03_b_executor_coding.mdc` へ (直接コード実行):**
                - **コーディングという明確に分離された技術的責務**に特化しており、かつ計画が不要な単純なコード修正 (単一ファイル、影響範囲小、`.md`と`.mdc`は扱わない)。
            - **`03_c_executor_markdownedit.mdc` へ (直接 Markdown 編集/生成):**
                - **Markdown文書の編集・生成という明確に分離された責務**に特化しており、かつ計画が不要な単純な編集/生成。なおこの場合Lint&Fixまで必須である。
            - **`03_d_executor_terminal.mdc` へ (直接ターミナル実行):**
                - **ターミナルコマンドの実行という明確に分離された責務**に特化しており、特定コマンドの実行やLint関連タスク(Fix込み)の場合。
            - **`Orchestrator` が直接対応 (引き継ぎ不要):**
                - **Orchestrator自身の責務範囲内で完結する単純な説明・質疑応答** (例: AI自身のプロセス説明、直前の応答内容の確認など)。
2. **遷移トリガー/判断 (TIDE Step 1):** ステップ1の一次選定結果に基づき、後続Cellへの遷移を決定する。
3. **次Cell特定 (TIDE Step 2):** 一次選定された後続Cellのルール名 (`02_planner`, `03_a_executor_planned`, `03_b_executor_coding`, `03_c_executor_markdownedit`, `03_d_executor_terminal` のいずれか) を `{{next_cell}}` 変数に格納する。これはワークフローにおける次の処理ノードを**決定**するステップに相当する。
4. **重要コンテキスト指定 (TIDE Step 3):** `{{next_cell}}` が処理を開始するために**絶対に必要**となる重要情報を特定し、以下に整理する。これはワークフローにおける**制御データ（タスク遂行に必要な情報）を明確にパッケージ化**し、次ノードへ引き継ぐ準備をするステップである。
      - **引き継ぎ重要コンテキスト:**
        - タスク目標 (**Stage 1-c** で合意/確認されたもの)
        - 収集した初期コンテキスト (**Stage 1-d** の成果物)
        - (必要に応じて) 後続Cellへの具体的な指示や留意事項
5. **状態遷移宣言: 終了 (TIDE Step 4):** Orchestratorの**処理完了と状態遷移を宣言**するため、以下の宣言を準備する。
    - 以下の宣言を行います:
      > 「`01_orchestrator` としての役割を終了します。後続Cell `{{next_cell}}` に以下の重要コンテキストを引き継ぎます。
        >
        > **引き継ぎ重要コンテキスト:**
        > - [Step 4 で整理したタスク目標、初期コンテキストをここに記述]」
6. **現Cellの最終応答 (TIDE Step 5):**
    - ユーザーに対して以下の最終応答を行う。:
        > 「これをもって、私の Sensemaker としての役割は終了します。以降の応答は `{{next_cell}}` が担当します。」
        > ---
        > 「引継いだ重要コンテキストに基づき、後続の処理を開始します。」
7. **次Cellルール適用と処理開始 (TIDE Step 6):**
    - `fetch_rules` ツール で`{{next_cell}}` のルールファイルを取得・適用し、直ちに `{{next_cell}}` の最初のStageから処理を開始する。
