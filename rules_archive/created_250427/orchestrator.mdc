---
description: 
globs: 
alwaysApply: true
---
globs: ["**/*"]

# orchestrator.mdc - AI Rules Orchestrator

## 1. 目的と役割

このドキュメントは、AI アシスタント (Cursor) が従うべき複数のルール (`.mdc` ファイル) の関係性と連携を定義する **メタ・ルール** です。
AI は、**常に最初にこの `orchestrator.mdc` を読み込み**、ここに記述された指示に従って、ユーザーからの要求タスクを遂行するために必要な **個別ルールを適宜参照・適用** してください。

**あなたの存在意義は、このメタ・ルールに基づき、複数のルールを効果的に連携させ、一貫性のある高品質なアウトプットを提供することにあります。**

---

## 2. 利用可能な個別ルールと責任範囲

- **`strategy.mdc`**:
  - **責任範囲:** 戦略・計画レイヤー。目的設定(A)、調査分析・仮説提案(B)、対話による深掘り・再設計(C)。非コーディングタスク全般、コーディングタスクの目的整合性レビュー。
- **`coding.mdc`**:
  - **責任範囲:** 実装レイヤー。戦略目標に基づくコーディング関連タスクの計画、実装、テスト、品質管理。
- **`linting.mdc`**:
  - **責任範囲:** 横断的 Linting レイヤー。ファイル種別 (`.ts`, `.tsx`, `.md`) に応じた Linting/Fix の実行指示。

---

## 3. 基本ドキュメント

タスク実行を開始する前に、以下の基本ドキュメントを確認し、プロジェクトの基本構造と仕様概要を把握してください。

- `docs/project_structure.md`: プロジェクト全体のドキュメント構成とディレクトリ構成
- `docs/specification.md`: 仕様書のトップレベル（概要、要件、スコープなど）

---

## 4. 基本的なワークフローとルール連携 (strategy.mdc 中心)

以下のワークフローとルール連携に従ってください。

1. **起点:** ユーザーからの指示 (`<user_query>`) を受け取ります。

2. **【Stage A: Understand】 (@strategy.mdc)**
    - **アクション:**  `## 3. 基本ドキュメント` を参照してドキュメント群とディレクトリの全体像を把握します(`read_file` ツール等を使用) 。続けて`@strategy.mdc` の **Phase A (目的確認)** に基づき、ユーザーの指示を分析し、具体的なタスク目標 (What) とその背景・理由 (Why) を明確化します。曖昧な点は質問を通じて徹底的に明確化し、目的が正しいかユーザに明示的に確認して合意を得ます。
    - **連携:** ユーザーからの合意が得られた（または `strategy.mdc` の例外ルール適用）後、Stage B に進みます。

3. **【Stage B: Plan】 (@strategy.mdc)**
    - **アクション:** `@strategy.mdc` の **Phase B (仮説〜提案)** に基づき、タスク達成のための具体的なアプローチ、手順、使用ツール、期待される成果物などを計画します。
    - **関連情報の収集・分析:**
        - 【Stage A】で確認した基本ドキュメントに加え、タスクに特に関連する仕様、ドキュメントおよびコードを **特定し、詳細に読み込み、分析** します。
        - 情報探索は、ファイル名 (`file_search`/`list_dir`)、キーワード (`grep_search`)、意味 (`codebase_search`)の順に軽量かつ確度の高いツールから段階的に試し、状況に応じて不要な探索はスキップして効率的に進めてください。
        - 必要に応じて、 `web_search` で最新の技術情報の収集も行います。
    - **計画立案:** 収集・分析に続けて、それらの情報から具体的な実行計画を立てます。
        - **非コーディングタスク:** そのまま `@strategy.mdc` のプロセスに従って実行計画を提案します。
        - **(Markdown作成・編集を含む場合):** 計画段階で **`docs/styleguide/markdown.md`** を参照し、記述内容がスタイルガイドに沿うようにします。
        - **コーディングタスク:** `@coding.mdc` で実行するための詳細なステップ、編集対象ファイル、期待されるコード変更などを計画します。
    - **計画の提示:** 計画内容をユーザーに提示し、合意を求めます。
    - **連携:** ユーザーから計画の合意が得られた後、Stage Cに進みます。計画変更が必要な場合は、このStage Bを継続して再計画します。

4. **【Phase C: Execute】 (@strategy.mdc, @coding.mdc, @linting.mdc)**
    - **アクション:** 【Stage B】で合意された計画に基づき、タスクを実行します。
    - **ルール適用:**
        - **コーディングタスクの場合:** `@coding.mdc` を参照し、計画されたステップに従ってコード編集 (`edit_file`)、テスト (`run_terminal_cmd`) などを実行します。`@coding.mdc` の品質原則を遵守します。
        - **その他のタスク (ドキュメント作成、調査等):** `@strategy.mdc` の指示に従い、計画を実行します。
    - **Linting の実行 (重要):**
        - **`.ts`, `.tsx`, `.md` ファイルを `edit_file` ツールで新規作成または編集した場合、必ず編集直後に `@linting.mdc` の指示に従って、該当ファイルに対する Linting/Fix プロセスを実行してください。**
    - **連携とフィードバック:**
        - 実行中に予期せぬ問題が発生した場合や、計画変更が必要になった場合は、一旦実行を中断し、【Stage B】に戻って再計画するか、`@strategy.mdc` の **Phase C (対話)** に基づきユーザーに相談します。
        - `@coding.mdc` で実装中に戦略的な判断が必要になった場合は、`@strategy.mdc` に判断を仰ぎます。
        - `@linting.mdc` の Linting プロセスで解決できない問題が発生した場合、ユーザーに報告・相談します。
    - **完了と報告:** 計画されたタスクが完了したら、成果物を確認し、ユーザーに結果を報告します。報告形式は `@coding.mdc` のStep 5などを参考に、タスク内容に応じて調整します。

---

## 5. 優先順位と矛盾解決

ルール間で指示や内容が矛盾する場合、以下の優先順位に従ってください。

1. **戦略・目的・意思決定:** `@strategy.mdc` の判断・指示を最優先とします。
2. **コードとドキュメントの最終的な構文・スタイル:** `@linting.mdc` (特に ESLint/markdownlint-cli2 --fix の結果) を最優先とします。
