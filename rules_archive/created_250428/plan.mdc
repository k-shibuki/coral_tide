---
description: 複雑なタスクや詳細な手順定義が必要な場合に実行計画を立案するためのルール
globs: 
alwaysApply: false
---
# Layer 2: Planning Rule (`plan.mdc`)

## 1. 役割と責任

このルールは、`orchestrator.mdc` によって呼び出され、複雑なタスクや詳細な手順定義が必要な場合に**実行計画を立案する**レイヤーです。
以下の責任を担います。

- **詳細情報収集:** タスク遂行に必要なドキュメント、コード、外部情報などを深く調査・分析する。
- **アプローチ定義:** 目的達成のための具体的なアプローチ、採用技術、手順、ツールなどを定義する。
- **計画提案と合意:** 策定した実行計画をユーザーに提示し、フィードバックを得て修正し、最終的な合意を得る。

## 2. 依存関係

- **上位レイヤーからの情報:** `orchestrator.mdc` から引き継がれたタスク目標と初期コンテキスト。
- **プロジェクト文書:** `docs/` 配下の関連ドキュメント (仕様書、設計書など)。
- **コードベース:** `src/` 配下の関連コード。
- **スタイルガイド:**
    - `rules/styleguide/markdown.md` (Markdown 編集を含む計画の場合)
    - `rules/styleguide/behavior_settings.md` (**重要:** 全体的な応答スタイルや最重要原則を参照)
- **外部情報:** 必要に応じて `web_search` ツールで収集。

## 3. Stages (ワークフローステップ)

`orchestrator.mdc` から呼び出された後、以下の Stage を順に実行します。
`rules/styleguide/behavior_settings.md` の全体原則を常に遵守してください。

### Stage 2-a: Detailed Information Gathering

1.  **ターゲット特定:** `orchestrator.mdc` から引き継いだ情報とタスク目標に基づき、計画立案に**不可欠なファイル、ドキュメント、コード箇所**を具体的に特定する。
2.  **詳細読み込み (`read_file` 優先):** 特定したターゲットに対して、**`read_file` ツールを最優先で**積極的に使用し、内容を**深く、完全に理解する**ことを目指す。必要であれば複数回に分けて読み込み、関連箇所を徹底的に把握する。
3.  **補足的探索 (必要に応じて):**
    - `read_file` で読み込んだ内容だけでは情報が不足する場合。
    - 関連する未特定のコード箇所を探す必要がある場合 (例: 依存関係の調査)。
    - 最新の外部技術情報が必要な場合。
    上記のような場合に**限り**、読み込んだ情報から生じた疑問点や確認事項に基づいて、**的を絞って**以下のツールを補足的に使用する。
        - `codebase_search`: 特定の機能やロジックに関連するコードを意味的に探す。
        - `grep_search`: 特定の変数名、関数名、設定値などを正確に探す。
        - `web_search`: 最新のライブラリ情報や技術的な解決策を探す。
4.  **情報統合と分析:** 収集した全ての情報（`read_file` の結果と補足的探索の結果）を統合し、計画立案に必要な知見を抽出・分析する。

### Stage 2-b: Approach Definition

1.  **仮説・論点の整理:**
    -   Stage 2-a の情報に基づき、タスク目標達成のための可能なアプローチ、解決策、論点を多角的にブレインストーミングする。
    -   アイデア間の関係性を明確にし、構造化することで、実行可能な仮説として整理する（考慮点: 実現可能性, インパクト, 前提条件, 時間軸など）。構造化にあたっては、思考を明確にするための適切な表現方法（図、リスト、マトリクス等）を柔軟に選択すること。
2.  **判断基準の検証:**
    -   **エビデンス評価:** 収集した情報やエビデンスを用い、各仮説/選択肢のメリット・デメリット、リスク、コストなどを客観的に評価・整理する。
    -   **信頼性評価:** 参照した情報の信頼性（情報源、鮮度、バイアスなど）を簡潔に評価し、判断材料として考慮する。
    -   **反復と追加情報要求:** 必要に応じて Stage 2-a に戻り追加情報を収集するか、検証に必要な情報が不足している場合はその旨を明示する。
3.  **最適なアプローチの選択:** 評価に基づき、最も合理的と考えられるアプローチを選択する。あるいは複数の選択肢をユーザーに提示する準備をする。
4.  **具体的な手順の策定:** 選択したアプローチに基づき、実行すべき具体的な手順をステップバイステップで定義する。**策定した手順にコード変更（例: `.ts`, `.tsx` ファイルの編集）が含まれる場合は、**`docs/technology_stack.md` で定義された技術スタックとバージョン方針に準拠していることを確認する。編集対象ファイル、使用するツール、期待される変更点などを明確にする。
5.  **成果物の定義:** タスク完了時の具体的な成果物（コード変更、生成されるドキュメント、テスト結果など）を定義する。

### Stage 2-c: Plan Proposal

1.  **計画の文書化:** Stage 2-b で策定したアプローチ、手順、成果物、およびその根拠（エビデンス評価、リスク分析等） を、ユーザーに分かりやすく提示できるよう整理する。
2.  **提案の実行:**
    -   計画内容をユーザーに提示する。結論を先に示し、その論理的な根拠、代替案（あれば）、潜在的なリスクや不確実性を明確に伝えること。
    -   ユーザーが意思決定しやすいように、情報を構造化して提示する（例：比較表、段階的説明）。
    -   **Markdown編集計画の場合:** `rules/styleguide/markdown.md` を参照し、スタイルガイドに準拠した計画であることを示す。
3.  **フィードバック要求:** 提案後には、「この計画内容でよろしいでしょうか？」や「ご意見、懸念点、あるいは追加で検討すべき論点などがあればお聞かせください。」のように、明確にフィードバックを求めること。

### Stage 2-d: Plan Refinement & Dialogue Trigger

1.  **フィードバックの受付:** ユーザーからの質問や懸念、修正要望を真摯に受け付ける。
2.  **計画の再検討:** フィードバックに基づき、Stage 2-b (Approach Definition) または Stage 2-a (Information Gathering) に戻ってアプローチや手順を再検討・修正する。
3.  **対話による深掘りの判断:**
    -   この時点で、ユーザーからの明確な要求があった場合、または AI 自身が計画の前提、選択肢、リスク等について更なる探索や共創的な対話が必要だと判断した場合 (例: 複数の有力な選択肢が残っている、ユーザーが懸念を示している、暗黙的な前提を確認したい場合など)、**Stage 2-e に進むことをユーザーに提案する。**
    -   提案時には、なぜ対話が必要と考えるのか、その理由も簡潔に伝えること。
4.  **最終合意:** (Stage 2-e を経ない場合) 修正された計画について、ユーザーから**明示的な合意**を得る。

### Stage 2-e: Exploratory Dialogue

**起動条件:** Stage 2-d でユーザーの同意を得て起動。

**目的:**
    -   計画、問題、仮説に関する**論点の深掘り**
    -   **意思決定のための整理**（判断軸の明確化、選択肢の再評価）
    -   思考パートナーとしての**共創的補完**（新しい視点の提示や探索）
    -   **方針の再設計**（新しいアプローチや解決策の探索）

**実行内容:**
1.  **対話の開始:** ユーザーに対し、「計画について、さらに深く検討しましょう。具体的にどの点から掘り下げますか？」のように、対話の開始と焦点を促す。
2.  **自由な対話:**
    -   特定のプロセスに縛られず、ユーザーとの共創的・探索的な対話を行う。
    -   AI は積極的に質問し、論点を提示し、ユーザーの思考を刺激する。
    -   **思考支援の原則:**
        -   **建設的批判:** 客観的な視点から建設的な批判や代替案を提示することを恐れない。
        -   **バイアス指摘:** ユーザー自身のバイアスや思考の偏りと思われる点を認識した場合、敬意を持って指摘を試みる。
        -   **論点提示:** 新たな視点や考慮すべき論点を積極的に提示し、ユーザーの思考を深める手助けをする。
3.  **思考支援ツールの活用 (任意):** 必要に応じて、思考整理に役立つフレームワークの提示（例：論点の分類、関係性の可視化など）、メリット・デメリットの再整理、関連情報の再検索 (`web_search` など) を行い、対話を活性化させる。特定のツールに固執せず、状況に応じて最適な支援方法を選択すること。
4.  **対話の収束と反映:** 対話を通じて得られた新たな洞察、変更点、決定事項などを整理する。計画 (Stage 2-b) や情報収集 (Stage 2-a) に反映させる必要があれば、対応する Stage に戻ることを提案する。
5.  **完了と最終合意へ:** ユーザーが対話による深掘りに満足した、または一旦区切りがついた時点で、**Stage 2-d の最終合意プロセスに戻ることを確認する。**

---
*このルールは、計画の合意が得られた後 (Stage 2-d または 2-e を経て)、`execute.mdc` に処理を引き継ぎます。その際、原則として **`planned_execution` Profile** を使用するよう指示します。*

