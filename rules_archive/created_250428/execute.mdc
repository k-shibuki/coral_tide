---
description: 具体的なタスクを実行する際のルール
globs: 
alwaysApply: false
---
# Layer 3: Execution Rule (`execute.mdc`)

## 1. 役割と責任

このルールは、`orchestrator.mdc` (単純タスクの場合) または `plan.mdc` (計画済みタスクの場合) から呼び出され、**具体的なタスクを実行する**レイヤーです。
以下の責任を担います。

- **Profileに基づく実行:** 決定された `Profile` に従い、定義された Stage Flow を実行する。
- **タスク遂行:** コード編集、ドキュメント作成・編集、コマンド実行、情報収集などの具体的な作業を行う。
- **品質管理:** コーディング規約の遵守、テスト実行、Linting/Fix を実行する。
- **結果報告:** 実行結果や生成物をユーザーに報告する 。
- **エラーハンドリング:** 問題発生時に適切な対応（再試行、`plan.mdc` への差し戻し、ユーザーへの相談）を行う。

## 2. 依存関係

- **上位レイヤーからの情報:** `orchestrator.mdc` または `plan.mdc` から引き継がれたタスク目標、実行計画、コンテキスト (`{{instructions}}` に相当)。
- **振る舞い設定:** `rules/styleguide/behavior_settings.md` (**重要:** 全体的な応答スタイルや最重要原則を参照)。
- **スタイルガイド:** `rules/styleguide/markdown.md` (Markdown編集時)。
- **コードベース & ドキュメント:** 編集・参照対象のファイル群。
- **Linting 設定:** `.eslintrc.js`, `.markdownlint.jsonc`。

## 3. Profiles (実行プロファイル)

タスクの性質や呼び出し元に応じて、以下のいずれかの Profile が選択され、対応する Stage Flow が実行されます。

### Profile: `planned_execution`
- **呼び出し元:** `plan.mdc`
- **対象:** `plan.mdc` で策定された詳細な実行計画（ステップリスト）。
- **役割:** 計画されたステップを順番に解釈し、実行する。各ステップで必要な Stage (3-b, 3-c, 3-d など) を呼び出す。
- **Stage Flow (概念):** `3-a` -> (計画ステップのループ: 各ステップの種類に応じた Stage 実行) -> `3-e` -> `3-f`. Error -> `3-g`.
    - 例: 計画ステップが「ファイル編集」なら `3-b` (`edit_file`) -> `3-d` (Lint/Fix)。「テスト実行」なら `3-c` (`run_terminal_cmd`)。

### Profile: `coding`
- **呼び出し元:** `orchestrator.mdc` (単純なコード編集タスク)
- **対象:** コードファイル (`.ts`, `.tsx` など) の新規作成または編集、関連するテスト実行。
- **基本原則:**
    - **ユーザー指示優先:** 常に上位レイヤーからの指示 (`{{instructions}}` 相当) を最優先します。
    - **品質重視:** 可読性、保守性、効率性、セキュリティを考慮した高品質なコードを目指します。
    - **技術スタック遵守:** **`docs/technology_stack.md` で定義された技術スタックとバージョン方針を厳守します。** `package.json` 等で管理されるバージョンは変更しません。
    - **ツール活用:** Cursor提供ツール (`edit_file`, `read_file`, `codebase_search`, `run_terminal_cmd` 等) を活用します。
    - **明確なコミュニケーション:** 進捗は適宜報告し、重要な判断や不明点は Stage 3-g を通じて確認します。
    - **指示外作業の禁止:** **明示的に指示されていない変更や実装は絶対に行いません。**
    - **バージョン変更の原則禁止:** **ライブラリのバージョンアップや技術スタックの変更が必要な場合は、自己判断で行わず、必ず Stage 3-g を通じてユーザーに提案し、承認を得てから実行します。**
- **品質原則:**
    - **明確性:** 明確で一貫性のある命名規則を使用します。
    - **コメント:** 適切なコメントを追加し、コードの意図を明確にします。
    - **テスト容易性:** テスト容易性を考慮した設計を心がけます (可能であればテストコードも作成)。
    - **セキュリティ:** セキュリティ脆弱性を生まないよう注意します。
    - **パフォーマンス:** パフォーマンスを意識した実装を行います（特に指示がある場合）。
    - **TypeScript:** 設計原則（例: SOLID）、エラーハンドリング方針などに注意してください。
- **Stage Flow:** `3-a` -> `3-b` (`edit_file`) -> `3-c` (Test `run_terminal_cmd`) -> `3-d` (Lint/Fix) -> `3-e` (Final Check) -> `3-f` (Report). Error -> `3-g`.

### Profile: `markdown_editing`
- **呼び出し元:** `orchestrator.mdc` (単純な Markdown 編集/生成タスク)
- **対象:** Markdown ファイル (`.md`) の新規作成、編集、または単純な生成。
- **基本原則:** `coding` Profile に準じるが、対象は Markdown とする。**`rules/styleguide/markdown.md`** を参照。
- **Stage Flow:** `3-a` -> `3-b` (`edit_file` / Generate & `edit_file`) -> `3-d` (Lint/Fix) -> `3-e` -> `3-f`. Error -> `3-g`.

### Profile: `terminal_operation`
- **呼び出し元:** `orchestrator.mdc` (単純なコマンド実行タスク)
- **対象:** 特定のターミナルコマンドの実行と結果確認。
- **基本原則:** 指示されたコマンドを正確に実行し、結果を分かりやすく報告。
- **Stage Flow:** `3-a` -> `3-b` (`run_terminal_cmd`) -> `3-e` (Result Check) -> `3-f`. Error -> `3-g`.

### Profile: `linting_only`
- **呼び出し元:** `orchestrator.mdc` (Lint/Fix のみ実行タスク)
- **対象:** 指定されたファイルパス、またはプロジェクト全体。
- **役割:** 対象に対して Linting および Fix のみを行う。
- **Stage Flow:** `3-a` -> `3-d` (Lint/Fix) -> `3-f` (Report). Error -> `3-g`.

*(Profile はここまで)*

## 4. Stages (ワークフローステップ)

選択された Profile の Stage Flow に従い、以下の Stage が実行されます。
`rules/styleguide/behavior_settings.md` の全体原則を常に遵守してください。

### Stage 3-a: Execution Setup
1.  **実行環境確認:** 必要なツール、依存関係が利用可能か確認。
2.  **コンテキスト再確認:** 上位レイヤーから引き継いだ指示 (`{{instructions}}` 相当)、計画 (planned_execution の場合)、および**選択された Profile** を再確認。不明瞭な点があれば Stage 3-g へ。
3.  **対象ファイル準備:** `read_file` で対象ファイル (編集、Lint 対象など) の最新状態を読み込む。(Profile や計画に応じて必要ない場合もある)

### Stage 3-b: Core Execution
1.  **Profile 指示実行:** 選択された Profile (`planned_execution` 以外) または `planned_execution` の現在の計画ステップに基づき、主要タスクを実行する。
    - **`coding`:** `edit_file` でコード編集。Profile 定義内の品質原則遵守。
    - **`markdown_editing`:** `edit_file` で Markdown 編集/生成。`rules/styleguide/markdown.md` 準拠。
    - **`terminal_operation`:** `run_terminal_cmd` でコマンド実行。
    - **`planned_execution` (ステップ解釈):** 計画ステップの種類に応じて `edit_file` や `run_terminal_cmd` を実行。
    - (`linting_only` はこの Stage をスキップ)
2.  **中間進捗報告 (任意):** 長時間かかると予想される場合、簡潔に進捗を報告することを検討する。

### Stage 3-c: Quality Assurance
1.  **テスト実行:** `coding` Profile の場合、計画に基づき関連するユニットテストや結合テストがあれば実行する (`run_terminal_cmd`)。
2.  **テスト結果確認:** テストが成功したか確認する。失敗した場合は Stage 3-g へ。

### Stage 3-d: Linting & Fix
1.  **対象ファイル特定:** Stage 3-b で編集または新規作成されたファイル (`.ts`, `.tsx`, `.md` など) を特定する。
2.  **Linting/Fix 実行:** 特定したファイルに対し、以下のプロセスに従って `run_terminal_cmd` を使用して Lint/Fix を実行する。
    - **TypeScript (.ts, .tsx):**
        - `npm run lint:ts:fix [対象ファイルパス]` を実行。
        - **結果確認:** エラーなく完了すれば Stage 3-e へ。自動修正不可のエラーが残った場合は、エラー内容を分析し、Stage 3-g (Error Handling) へ移行して手動修正検討またはユーザー相談。
    - **Markdown (.md):**
        - `npm run lint:md:fix [対象ファイルパス]` を実行。
        - **結果確認 & リトライ:** コマンドがエラーを報告する場合 (終了コード 0 以外)、**最大3回まで**再実行する。
        - **最終確認:** 3回試行してもエラーが解消されない場合、または自動修正不可のエラーが残った場合は、Stage 3-g (Error Handling) へ移行してユーザー相談。エラーなく完了すれば Stage 3-e へ。

### Stage 3-e: Result Confirmation
1.  **成果物検証:** 生成または変更されたファイル、コマンド実行結果などを確認し、計画通りか、期待した状態になっているか検証する。(`coding` Profile は要件整合性、重複チェックも実施)。
2.  **Linting最終確認 (任意):** `coding` Profile で、念のため変更ファイルに対し再度 Linting を実行し問題ないか確認 (`run_terminal_cmd npm run lint:ts [対象ファイルパス]` や `npm run lint:md [対象ファイルパス]`)。問題があれば Stage 3-g へ。

### Stage 3-f: Reporting
1.  **結果の整理:** 実行結果、成果物、発生した問題などを整理する。
2.  **報告:** 以下の形式で最終結果を報告する。**粒度はタスクの複雑さに応じて適切に調整すること。** 不要な項目は省略可。

    ```markdown
    # 実行結果報告

    ## 概要
    [ユーザー指示(`{{instructions}}`相当)に対する全体の要約]

    ## 実行 Stage と結果
    - Stage 3-a (Setup): [実行内容と結果概要]
    - Stage 3-b (Execution): [実行内容と結果概要]
    - Stage 3-c (QA): [実行内容と結果概要 or N/A]
    - Stage 3-d (Linting): [実行内容と結果概要（問題なし or 対応内容）]
    - Stage 3-e (Confirmation): [実行内容と結果概要]

    ## 主な変更点/成果物
    - [変更ファイル1: 変更内容の要約]
    - [変更ファイル2: 変更内容の要約]
    - [その他成果物へのリンクなど]

    ## 品質管理/テスト結果
    - [Stage 3-c で実施したテスト結果の要約]
    - [Stage 3-d, 3-e で実施した Linting 結果（問題なし or 対応内容）]

    ## 課題対応（該当する場合）
    - [Stage 3-g で対応した問題、原因、対応内容]

    ## 注意点/改善提案 (任意)
    - [コード利用上の注意点や、今後の改善提案など]
    ```
3.  **ユーザーへの示唆:** ユーザーが次に行うべきアクションがあれば示唆する。

### Stage 3-g: Error Handling
1.  **問題検知:** 各 Stage 実行中に発生したエラーや問題を検知 (例: `edit_file` 失敗, テスト失敗 (3-c), Lint エラー未解消 (3-d), 予期せぬコマンド結果 (3-b), 計画との不整合 (3-e) など)。
2.  **原因分析:** 可能であれば、エラーメッセージや状況から原因を推測する。
3.  **対応判断:** 以下のいずれかを選択する。
    - **自己修正試行:** 簡単な問題であれば修正を試みる (例: `reapply` ツール、軽微なコード修正 `edit_file`)。成功すれば元の Stage に戻る。
    - **計画見直し依頼:** 根本的な問題や計画の不備が疑われる場合 (例: 前提条件の間違い、手順の欠陥)、`plan.mdc` に処理を戻すよう上位レイヤーに報告・依頼する。
    - **ユーザー相談:**
        - 原因不明のエラー。
        - 複数の解決策があり、ユーザーの判断が必要な場合。
        - Linting エラーが自動修正できない、または修正による意図しない変更のリスクがある場合。
        - 実行時間が想定より大幅にかかる場合。
        - その他、AI だけで判断が困難な場合。
4.  **ユーザーへの報告・相談:** ユーザー相談を選択した場合、以下の情報を明確に報告し、指示を仰ぐ。
    -   発生した問題
    -   試した対応（あれば）
    -   推測される原因（可能であれば）
    -   現在の状況
    -   推奨される次のアクション (AI として提案できる場合)

---
*このルールはタスク完了後 (Stage 3-f)、またはエラー発生による上位レイヤーへの差し戻し/ユーザー相談 (Stage 3-g) で処理を終了します。*
