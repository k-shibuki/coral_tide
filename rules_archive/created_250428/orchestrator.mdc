---
description: 
globs: 
alwaysApply: true
---
globs: ["**/*"]

# Layer 1: Orchestrator Rule (`orchestrator.mdc`)

## 1. 役割と責任

このルールは、カスタムインストラクション全体の**起点**となるレイヤーです。
ユーザーからの指示 (`<user_query>`) を受け取り、以下の責任を担います。

- **初期理解:** ユーザー指示の概要と基本的なプロジェクトコンテキストを把握する。
- **タスク明確化:** タスクの具体的な目的 (Why) と目標 (What) を明確化し、ユーザーと合意する。
- **初期コンテキスト収集:** タスク遂行に必要な初期情報を収集する。
- **後続レイヤー決定:** タスクの性質に基づき、`plan.mdc` または `execute.mdc` のどちらを呼び出すかを決定し、連携する。

## 2. 依存関係

- **基本ドキュメント:**
    - `docs/project_structure.md`
    - `docs/specification.md`
- **振る舞い設定:**
    - `rules/styleguide/behavior_settings.md` (**重要:** 全体的な応答スタイルや最重要原則を参照)
- **ユーザー指示:** `<user_query>`
- **後続レイヤー:** `plan.mdc`, `execute.mdc`

## 3. Stages (ワークフローステップ)

以下の Stage を順に実行します。

### Stage 1-a: Initial Understanding

1.  **ユーザー指示確認:** `<user_query>` の内容を注意深く読み取る。
2.  **基本ドキュメント確認:** `docs/project_structure.md` と `docs/specification.md` を `read_file` ツールで読み込み、プロジェクトの全体像と仕様概要を把握する。
3.  **タスク概要の内部整理:** ユーザーが何を求めているかの最初の仮説を立てる。

### Stage 1-b: Task Clarification

**この Stage はタスク全体の方向性を決定する極めて重要な段階です。時間をかけて詳細に検討してください。**
`rules/styleguide/behavior_settings.md` の全体原則に加え、以下の詳細ガイドラインを**厳密に**遵守してください。

1.  **目的・目標の質問と明確化:**
    -   Stage 1-a で不明瞭だった点や、タスクの背景・目的 (Why)、具体的な成果物 (What) について、**ユーザーの言葉で正確に再確認**しつつ、**徹底的に質問**して曖昧さを排除します。
    -   **質問例:** 「〜という理解でよろしいでしょうか？」、「具体的にはどのような〜をお考えですか？」、「このタスクの最終的なゴールは何ですか？」
    -   ユーザーの意図を完全に理解するまで、安易に次のステップに進まないでください。
2.  **合意形成:**
    -   明確化された目的と目標について、ユーザーに提示し、**原則としてユーザーからの明示的な合意**を得るまで、Stage 1-c に進まないでください。
    -   **例外:** 合意形成が不要、または困難な場合の例外処理 (例: 自律的に判断して進めるケース、ユーザー指示が極めて明確な場合) については、以下の判断基準を慎重に適用してください。
        - **例外判断基準 (参考):**
            - ユーザー指示が「特定の Lint エラーを修正して」のように具体的かつ限定的か？
            - 目的や背景について AI が合理的な確信を持てるか？
            - 不明瞭な点が一切ないか？
        - **少しでも不明瞭な点や解釈の余地がある場合は、例外を適用せず、必ず合意を得てください。**

### Stage 1-c: Context Acquisition

1.  **情報収集戦略:** Stage 1-b で明確になったタスク目標に基づき、初期段階で必要と思われる情報を特定する。
2.  **ツール実行:** 以下のツールを**軽量なものから順に**試行し、関連情報を収集する。状況に応じて不要な探索はスキップする。
    - `list_dir` / `file_search`: 関連しそうなディレクトリやファイルの見当をつける。
    - `grep_search`: 特定のキーワードやパターンでコード/ドキュメント内を検索する。
    - `codebase_search`: 意味的な関連性でコードスニペットを検索する。
3.  **収集結果の整理:** 収集した情報を整理し、タスクの性質（コーディング、ドキュメント編集、調査など）を判断する材料とする。

### Stage 1-d: Layer Determination

1.  **タスク性質判断:** Stage 1-c で収集した情報と Stage 1-b で合意したタスク目標に基づき、タスクの主要な性質と複雑度を判断する。
    - **考慮事項:** タスクは計画が必要なほど複雑か？ それとも `execute.mdc` の特定の Profile で直接実行可能か？
    - **判断基準例:**
        - **`plan.mdc` へ (計画必要):**
            - 複雑なコード変更、複数ファイルへの影響、新機能開発。
            - **情報調査・分析** が必要なタスク (単純な検索・確認を除く)。
            - 依存関係の調査や設計検討が必要なタスク。
            - 実行手順が不明確、または複数のステップが必要なタスク。
            - その他、判断が難しい場合 (安全策)。
        - **`execute.mdc` へ (直接実行可能):**
            - 単純なコード修正 (単一ファイル、影響範囲小): **`coding` Profile**
            - Markdown ファイルの単純な編集/生成: **`markdown_editing` Profile**
            - 特定コマンドの実行: **`terminal_operation` Profile**
            - 指定された対象の Lint/Fix のみ: **`linting_only` Profile**

2.  **後続レイヤー選択と Profile 決定:**
    - **計画が必要な場合:**
        - **選択:** `plan.mdc`
        - **引き継ぎ情報:** タスク目標、収集した初期コンテキスト。
        - **備考:** 調査・分析タスクはここで `plan.mdc` に渡され、`plan.mdc` の Stage 2-a で処理される。
    - **直接実行可能な場合:**
        - **選択:** `execute.mdc`
        - **Profile 決定:** 上記の判断基準に基づき、**使用する `Profile` を明確に決定**する (`coding`, `markdown_editing`, `terminal_operation`, `linting_only`)。
        - **引き継ぎ情報:** タスク目標、収集した初期コンテキスト、**決定した `Profile` 名**。

3.  **連携実行:** 決定したレイヤー (`plan.mdc` または `execute.mdc`) を呼び出し、必要な情報を引き継いで処理を依頼する。

---
*このルールは `plan.mdc` または `execute.mdc` に処理を引き継ぎます。*
