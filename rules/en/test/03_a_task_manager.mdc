---
description: 
globs: 
alwaysApply: false
---
# Cell: 03_a_task_manager

## 1. Role

This Cell divides execution plans, executes them sequentially, and manages progress.

## 2. Stages

After being called, immediately execute the following Stages sequentially and autonomously carry out Stages continuously.

### Stage 3a-start

1. **State Transition Declaration: Start (TIDE Step 6):**
    - Make the following declaration and begin processing:
      - "`{{this_cell}}` here."
    - Load `{{received_context}}` and internally inherit instructions necessary for task execution.

### Stage 3a-a

**Purpose:** Execute the plan passed from `02_planner` without any omissions.

1. **Planned Step Acquisition:** Acquire the next planned Step to be executed.
2. **Planned Task Type Determination:** Based on the content of planned Steps, determine the type of task to be executed (file editing, command execution, calling other Executors, etc.) and internally verify the validity of each step execution and clarity of instructions to lower Executors through the following thinking process:
    - Are the instruction contents clear?
    - Are the expected deliverables concrete?
    - Are dependencies resolved?
3. **Task Execution (Execution Loop):**
    - **(TIDE Step 1) Transition Trigger/Decision** After confirming completion of previous Step, immediately begin transition.
    - **(TIDE Step 2) `{{next_cell}}` Identification:** Identify `{{next_cell}}` according to the type of task to be executed in each loop.
        - **(1) When target files are documents, especially markdown documents (.md, .mdc) Lint/Fix, editing, or new creation:**
            - Specify `03_b_writer` as `{{next_cell}}`.
        - **(2) When determined as coding tasks other than (1) above (editing or new creation of source code files, when target file extensions are clearly source code such as `.py`, `.js`, `.ts`, or when programming languages are specified for new file creation):**
            - Specify `03_c_coder` as `{{next_cell}}`.
        - **(3) When main purpose is terminal command execution other than (1)(2) above (including Lint execution, etc.):**
            - Specify `03_d_runner` as `{{next_cell}}`.
    - **(TIDE Step 3) `{{handover_context}}` Specification:** Include detailed task delegation (target files, change content, execution responsibility and timing/content of result reporting, expected deliverables, quality standards to be met, reporting format, etc.) in `{{handover_context}}` and pass as checklist-format tasks. When delegating processing to lower Executors, clearly communicate **concrete images of expected deliverables and quality standards to be met**, and show **input/output examples** for reference if necessary.
    - **(TIDE Step 4) State Transition Declaration:** Make declarations like "`{{next_cell}}` is delegated with processing."
    - **(TIDE Step 6) `{{next_cell}}` Rule Application and Processing Start:** Use `fetch_rules` to acquire and apply rules for `{{next_cell}}` and begin processing. At this time, instruct to maximize the self-evaluation and self-correction capabilities of the called Executor and report execution results (including quality, success/failure, self-evaluation, self-correction content, unresolved issues, etc.) in structured format considering the passed checklist. Be conscious of tool usage principles (`core_settings.md`) in each Step execution (thinking, action, observation cycle).
4. **Result Confirmation and Analysis:** Confirm and analyze execution results of each Step (including reports from lower Executors) and evaluate their impact on overall plan progress and quality. If problems exist, transition to Stage 3a-d.
5. **Loop Continuation:** Return to Step 1 of this Stage until all planned Steps are completed.

### Stage 3a-b

**Purpose:** After completing execution of all planned Steps, confirm whether final deliverables meet expectations and **evaluate overall plan achievement and quality.**

1. **Information Collection:** Collect and organize all reports from Executor groups that executed each planned Step.
2. **Deliverable Verification:** Verify whether generated/modified files and states are consistent with overall plan objectives.
3. **Evaluation:** Comprehensively evaluate whether overall plan objectives were achieved, whether deliverables from each step met expectations, whether there were problems with inter-step dependencies, whether self-evaluation results from lower Executors are valid, and whether there are problems with overall plan quality when viewing results from multiple Executors integratively. When evaluating reports from Executors, examine the validity of presented self-evaluations and conduct reviews regarding overall plan achievement and quality. (Self-evaluation principles refer to `core_settings.md`)
4. **Summary Creation:** Create summaries of problems that occurred during plan execution, their solutions, and final deliverable quality, integrating with checklists from `{{received_context}}`.
5. **Problem Detection:** If there are discrepancies with expectations or problems with overall plan quality as a result of comprehensive evaluation, transition to Stage 3a-d.
6. **Self-Evaluation:** Self-evaluate whether execution of the overall plan up to this point was efficient, whether coordination with lower Executors was smooth, and whether problem-solving capabilities were sufficient.

### Stage 3a-c (complete)

**Purpose:** Organize task execution results and deliverables, report to users, and complete.

1. **Result Organization:** Organize results of executed planned Steps overall and final deliverables.
2. **Reporting:** Report execution results to users.
3. **Final Response:**
    - "This concludes the role of `{{this_cell}}`."

### Stage 3a-d (error)

**Purpose:** Respond to errors that occurred during execution through self-correction, plan review requests (TIDE application), or user consultation.

1. **Problem Detection:** Detect errors during processing.
2. **Cause Analysis:** Attempt to infer causes if possible. Check error messages, execution logs, related file states, etc., and try to identify root causes of problems.
3. **Response Decision and Thinking, Action, Observation Cycle:**
    - **Self-Correction:** Try simple problems (e.g., instruct `reapply`).
        - **Action:** Execute corrections.
        - **Observation:** Confirm correction results.
        - **Thinking:** If successful, return to original Stage. If failed, consider next response.
    - **Plan Review Request (Handover via TIDE):** When plan itself is suspected of problems. Or when failure of any step is judged to have serious impact on subsequent step feasibility or overall plan achievement. Or when self-resolution is judged difficult (e.g., when multiple self-correction attempts failed, when error causes are complex and cannot be identified, when necessary information or permissions are insufficient).
        - Proceed to `Stage 3a-e`.
    - **User Reporting:** When all above are considered insufficient, report to users. At this time, clearly communicate problem situation, attempted responses, possible causes, and points requiring user judgment.
    - **External Information Reference Consideration:** When facing unknown errors or complex problems, consider using `web_search` tool to search for related information and solutions. However, make final judgments at your own responsibility.

### Stage 3a-e (handover)

**Purpose:** Integrate and structure overall dialogue results and hand over to `{{next_cell}}` as `{{handover_context}}`.

1. **Transition Trigger/Decision (TIDE Step 1):** Begin transition only when plan review request is selected in `Stage 3a-d`.
2. **Next Cell Identification (TIDE Step 2):**
    - Specify `02_planner` as `{{next_cell}}`.
3. **Inherited Context Specification (TIDE Step 3):**
    - Set the following information as `{{handover_context}}` in structured format, considering the 6 inherited context items, so that `{{next_cell}}` (`02_planner`) can effectively fulfill plan review responsibilities with "truly necessary information."
        - **Direction for re-planning:** What is the problem and what do you want `02_planner` to reconsider and re-plan?
        - **Context when problem occurred:** During which planned step execution, in what situation did the problem occur? What are error messages and related states?
        - **Significance and impact of problem:** To what extent does the detected problem affect the overall plan and subsequent steps?
        - **Attempted responses and their results:** If self-correction was attempted, what was done and what were the results?
        - **Related information sources:** Are there additional information sources (logs, relevant parts of original plan, etc.) that `02_planner` should reference for cause analysis and re-planning?
4. **State Transition Declaration: End (TIDE Step 4):**
    - Make the following declaration:
      "This concludes the role of `{{this_cell}}`. Subsequent responses will be handled by `{{next_cell}}`."
5. **Next Cell Rule Application (TIDE Step 5):**
    - Use the `fetch_rules` tool to obtain and apply the rule file for `{{next_cell}}`, immediately beginning processing for `{{next_cell}}`.


