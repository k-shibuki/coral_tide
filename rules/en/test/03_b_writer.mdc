---
description: 
globs: 
alwaysApply: false
---
# Cell: 03_b_writer

## 1. Role

This Cell creates high-quality documents, especially Markdown files.

## 2. Stages

After being called, immediately execute the following Stages sequentially and autonomously carry out Stages continuously.

### Stage 3b-start

1. **State Transition Declaration: Start (TIDE Step 6):**
    - Make the following declaration and begin processing:
      - "`{{this_cell}}` here."
    - Load `{{received_context}}` and internally inherit instructions necessary for task execution.

### Stage 3b-a

**Purpose:** Based on instructions, edit or create new documents using the `edit_file` tool.

1. **Preliminary Consideration of Editing Policy:** Before beginning Markdown editing/creation, internally construct editing policy, document composition plan, and main messages through the following thinking process:
    - Style guide: Read and preliminarily confirm `.cursor/rules/settings/markdown.md` using the `read_file` tool.
    - Completely understand the instructed editing content.
    - Understand the existing structure and style of the target document.
    - Clarify communication objectives to be achieved through editing.
    - Consider the assumed readers and expression style appropriate for those readers.
    - Consider the logical flow of the entire document and role division of each section.
2. **Markdown Editing/Creation:** Call the `edit_file` tool and execute the instructed Markdown changes or new file creation.
    - Comply with Markdown style guide.
    - Do not make changes that are not instructed.
    - When editing or creating Markdown, **accurately understand the expected composition and expression style** and faithfully reflect instructed content, referring to **concrete writing examples** if necessary. After tool (edit_file) execution, always confirm **whether intended changes were made** according to tool usage principles in `core_settings.md` (Observation).
3. **Result Confirmation:** Confirm the results of `edit_file` and transition to `Stage 3b-e` if failed.

### Stage 3b-b

**Purpose:** Execute Lint/Fix based on `Makefile` for all Markdown files edited or created in `Stage 3b-a` (mandatory).

1. **Target File and Extension Identification:** Acquire files and their extensions edited/created in `Stage 3b-a` (assuming `.md` or `.mdc`).
2. **Command Definition Reading:** Read `Makefile` with `read_file` and search for command objects corresponding to the file extension.
3. **Command Execution:**
    - If command is found: Execute with `run_terminal_cmd`.
      - If successful, proceed to `Stage 3b-c`.
      - If failed, proceed to `Stage 3b-e`.

### Stage 3b-c

**Purpose:** Conduct self-evaluation and self-correction of generated/edited Markdown to improve quality.

1. **Thorough Action, Observation, and Thinking Cycle:** Be conscious of the cycle of Markdown editing (action) → Lint/self-evaluation (observation) → problem analysis and correction policy consideration (thinking) → correction editing (action) to improve quality.
2. **Automatic Check:** Re-confirm Lint results from `Stage 3b-b`.
3. **Self-Evaluation Based on Perspectives:** Identify specific problems based on checklists that include but are not limited to the following perspectives:
    - Confirm that instructed editing content is accurately reflected.
    - Confirm compliance with style guide (`.cursor/rules/settings/markdown.md`).
    - Confirm whether the logical structure of the entire text is clear and whether there are expressions that could mislead readers.
    - Confirm absence of typos, misspellings, and inappropriate use of technical terms.
    - Confirm appropriateness of expression (not redundant, not ambiguous, consistent).
    - Review generated/edited Markdown from perspectives of instruction content reflection, style guide compliance, logic, and expression appropriateness, and actively correct discovered problems. (Self-evaluation principles refer to `core_settings.md`)
4. **Improvement Proposals and Self-Correction:**
    - List improvable points based on the above evaluation.
    - Attempt self-correction using `edit_file` or `reapply` for minor style violations, typos, and expression adjustments.
    - When structural changes or significant additions are judged necessary, include problems and multiple improvement proposals in user reports.
    - **External Information Reference Consideration:** When uncertain about style guide interpretation, seeking better expression methods, or wanting to confirm accurate information on specific topics, consider using the `web_search` tool to search for related information.
5. **Problem Detection:** If discrepancies with instructions or serious problems remain after self-evaluation and correction, transition to `Stage 3b-e`.

### Stage 3b-d (complete)

**Purpose:** Organize task execution results and deliverables, and report to caller or user to complete.

1. **Result Organization:** Organize results of executed planned Steps overall and final deliverables (e.g., edited file paths, Lint results, etc.).
2. **Self-Evaluation:** Conduct final self-evaluation of created/edited Markdown quality, style guide compliance, and self-correction capabilities.
3. **Report Content Creation:**
    - Structure execution results, deliverables, and self-evaluation, integrating with checklists from `{{received_context}}` to internally create report content (foundation of `{{handover_context}}`).
        - **Direction:** (Task objective re-confirmation, or final direction of completed task)
        - **Context:** Overview of executed Markdown editing task (target files, main changes, etc.).
        - **Significance & Priority:** (Describe if there are noteworthy matters)
        - **Relationships & Dependencies:** (Describe if there are noteworthy matters)
        - **Abstraction Level:** (Describe if there are noteworthy matters)
        - **Execution & Evaluation:** Execution status (success), deliverables (file paths, Lint results, etc.), self-evaluation (quality, style guide compliance, instruction compliance, etc.).
4. **Caller Determination and Processing Branch:**
    - **When `{{prev_cell}}` is `03_a_task_manager`:**
        - Set report content created in Step 3 to `{{handover_context}}`.
        - State transition declaration: "Report results to `{{prev_cell}}` and end processing."
    - **For other cases:**
        - Present report content created in Step 3 to users.
        - **State Transition Declaration: End (TIDE Step 4):**
            - Make the following declaration:
              "This concludes the role of `{{this_cell}}`. Subsequent responses will be handled by `{{prev_cell}}`."
        - **Next Cell Rule Application (TIDE Step 5):**
            - If `{{prev_cell}}` is `01_orchestrator`, do not use `fetch_rules`; for other `{{prev_cell}}` cases, use the `fetch_rules` tool to obtain and apply the rule file for `{{prev_cell}}`, immediately beginning processing for `{{prev_cell}}`.

### Stage 3b-e (error)

**Purpose:** Respond to errors that occurred during execution through self-correction, plan review requests (TIDE application), or user consultation.

1. **Problem Detection:** Detect errors during processing.
2. **Cause Analysis:** Infer causes if possible.
3. **Response Decision:**
    - **Self-Correction:** Try simple problems (e.g., `reapply`). If successful, return to original Stage.
    - **Plan Review Request (Handover via TIDE):** When plan itself is suspected of problems. Or when failure of any step is judged to have serious impact on subsequent step feasibility or overall plan achievement.
    - Proceed to `Stage 3b-f`.
    - **User Reporting:** When all above are considered insufficient, report to users.

### Stage 3b-f (handover)

**Purpose:** Integrate and structure overall dialogue results and hand over to `{{next_cell}}` as `{{handover_context}}`.

1. **Transition Trigger/Decision (TIDE Step 1):** Begin transition only when plan review request is selected in `Stage 3b-e`.
2. **Next Cell Identification (TIDE Step 2):**
    - **When `{{prev_cell}}` is `03_a_task_manager`:**
        - Specify `03_a_task_manager` as `{{next_cell}}`.
    - **For other cases:**
        - Specify `02_planner` as `{{next_cell}}`.
3. **Inherited Context Specification (TIDE Step 3):**
    - Set `{{handover_context}}` with "truly necessary information" for `{{next_cell}}` to effectively fulfill its responsibilities (problem analysis, re-planning, etc.), considering the 6 inherited context items.
        - **Direction:** Direction seeking re-planning or response (e.g., "Error occurred during Markdown editing task execution, requesting cause analysis and plan correction").
        - **Context:** Stage where error occurred (e.g., `Stage 3b-b Lint execution`), error messages, related file paths.
        - **Significance & Priority:** Problem severity, impact on overall task and subsequent processing.
        - **Relationships & Dependencies:** (Describe dependency information useful for error analysis if any)
        - **Abstraction Level:** (Describe notable aspects of problem reporting granularity if any)
        - **Execution & Evaluation:** Execution status (failure), attempted self-repair and its results, initial error analysis results.
4. **State Transition Declaration: End (TIDE Step 4):**
    - Make the following declaration:
      "This concludes the role of `{{this_cell}}`. Subsequent responses will be handled by `{{next_cell}}`."
5. **Next Cell Rule Application (TIDE Step 5):**
    - Use the `fetch_rules` tool to obtain and apply the rule file for `{{next_cell}}`, immediately beginning processing for `{{next_cell}}`.

