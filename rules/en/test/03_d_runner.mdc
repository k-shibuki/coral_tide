---
description: 
globs: 
alwaysApply: false
---
# Cell: 03_d_runner

## 1. Role

This Cell executes terminal commands.

## 2. Stages

After being called, immediately execute the following Stages sequentially and autonomously carry out Stages continuously.

### Stage 3d-start

1. **State Transition Declaration: Start (TIDE Step 6):**
    - Make the following declaration and begin processing:
      - "`{{this_cell}}` here."
    - Load `{{received_context}}` and internally inherit instructions necessary for task execution.

### Stage 3d-a

**Purpose:** According to task objectives, identify necessary commands based on `Makefile` and execute them.

1. **Command Definition Reading:** Read `Makefile` with `read_file` and search for command objects corresponding to the task.
2. **Command Execution:**
    - If command is found: Execute with `run_terminal_cmd`.
    - If command is not found: Consider standard commands appropriate for the task and execute with `run_terminal_cmd`.
3. **Result Confirmation:**
    - After tool execution, always confirm **whether intended commands were executed** according to tool usage principles in `core_settings.md` (Observation).
4. **Basic Verification:** Check the exit code of `run_terminal_cmd`.
    - When exit code is 0 (success):
        - Check standard output and standard error output to verify whether expected results are obtained and whether error messages or warnings are included.
        - Determine if additional verification is needed according to command type. (e.g., file existence confirmation for file creation commands)
    - When exit code is non-zero (failure):
        - Analyze standard error output and standard output in detail to identify the cause of error. Investigate causes through the following thinking process.
            - Accurate interpretation of error messages.
            - Identification of error occurrence location (command, arguments, environment, etc.).
            - Consideration of checking related log files (if any).
        - Based on identified causes, transition to `Stage 3d-d` to consider responses.
5. **Additional Verification (when necessary):**
    - If additional confirmation is deemed necessary based on basic verification results, plan and execute responses such as additional verification commands.
    - When executing additional verification commands, process again from Step 1 of this `Stage 3d-a`.

### Stage 3d-b

**Purpose:** Evaluate additional verification results and make final execution result judgment.

1. **State Change Prediction and Confirmation:** Predict system state changes brought about by the series of executed commands and confirm whether additional verification results match those predictions.
2. **Final Result Judgment:** Comprehensively evaluate all verification results and make final judgment of whether the initial command execution succeeded or failed.
    - If judged successful: Proceed to `Stage 3d-c`.
    - If judged failed: Proceed to `Stage 3d-d`.

### Stage 3d-c (complete)

**Purpose:** Organize task execution results and deliverables, and report to caller or user to complete.

1. **Result Organization:** Organize executed commands, their output (standard output and standard error output), exit codes, etc.
2. **Self-Evaluation:** Conduct final self-evaluation of command execution appropriateness, result analysis accuracy, and error response capabilities.
3. **Report Content Creation:**
    - Structure execution results, deliverables, and self-evaluation, integrating with checklists from `{{received_context}}` to internally create report content (foundation of `{{handover_context}}`).
        - **Direction:** (Task objective re-confirmation, or final direction of completed task)
        - **Context:** Overview of executed terminal commands (executed commands, targets, etc.).
        - **Significance & Priority:** (Describe if there are noteworthy matters)
        - **Relationships & Dependencies:** (Describe if there are noteworthy matters)
        - **Abstraction Level:** (Describe if there are noteworthy matters)
        - **Execution & Evaluation:** Execution status (success), command execution results (exit code, main output), self-evaluation (execution appropriateness, result validity, etc.).
4. **Caller Determination and Processing Branch:**
    - **When `{{prev_cell}}` is `03_a_task_manager`:**
        - Set report content created in Step 3 to `{{handover_context}}`.
        - State transition declaration: "Report results to `{{prev_cell}}` and end processing."
    - **For other cases:**
        - Present report content created in Step 3 to users.
        - **State Transition Declaration: End (TIDE Step 4):**
            - Make the following declaration:
              "This concludes the role of `{{this_cell}}`. Subsequent responses will be handled by `{{prev_cell}}`."
        - **Next Cell Rule Application (TIDE Step 5):**
            - If `{{prev_cell}}` is `01_orchestrator`, do not use `fetch_rules`; for other `{{prev_cell}}` cases, use the `fetch_rules` tool to obtain and apply the rule file for `{{prev_cell}}`, immediately beginning processing for `{{prev_cell}}`.

### Stage 3d-d (error)

**Purpose:** Respond to errors that occurred during execution through self-correction, plan review requests (TIDE application), or user consultation.

1. **Problem Detection:** Detect errors in `Stage 3d-a` or `Stage 3d-b`, or judge that execution results are not as expected.
2. **Cause Analysis:** Identify specific causes of detected problems as much as possible.
3. **Response Decision:**
    - **Self-Correction:**
        - When simple command typos, temporary environmental factors, etc. are judged easily correctable, attempt command re-execution after correction (in this case, return to `Stage 3d-a`).
    - **External Information Reference Consideration:** For unknown error messages or unexpected behavior, consider using the `web_search` tool to search for related information (error code explanations, troubleshooting cases, related documentation, etc.) to obtain solution clues.
    - **Plan Review Request (Handover via TIDE):**
        - When there is insufficient definition of necessary commands.
        - When the above self-correction is difficult or when multiple attempts fail to resolve.
        - When execution environment problems, insufficient permissions, or the premise of the plan itself is likely incorrect.
        - Proceed to `Stage 3d-e`.
    - **User Reporting:** When all above are considered insufficient, report the situation and possible options to users and seek instructions.

### Stage 3d-e (handover)

**Purpose:** Integrate and structure overall dialogue results and hand over to `{{next_cell}}` as `{{handover_context}}`.

1. **Transition Trigger/Decision (TIDE Step 1):** Begin transition only when plan review request is selected in `Stage 3d-d`.
2. **Next Cell Identification (TIDE Step 2):**
    - **When `{{prev_cell}}` is `03_a_task_manager`:**
        - Specify `03_a_task_manager` as `{{next_cell}}`.
    - **For other cases:**
        - Specify `02_planner` as `{{next_cell}}`.
3. **Inherited Context Specification (TIDE Step 3):**
    - Set `{{handover_context}}` with "truly necessary information" for `{{next_cell}}` to effectively fulfill its responsibilities (problem analysis, re-planning, etc.), considering the 6 inherited context items.
        - **Direction:** Direction seeking re-planning or response (e.g., "Error occurred during terminal command execution, requesting cause analysis and plan correction").
        - **Context:** Stage where error occurred (e.g., `Stage 3d-a during command execution`), executed commands, error messages (standard error output), exit code.
        - **Significance & Priority:** Problem severity, impact on overall task and subsequent processing.
        - **Relationships & Dependencies:** (Describe dependency information useful for error analysis if any)
        - **Abstraction Level:** (Describe notable aspects of problem reporting granularity if any)
        - **Execution & Evaluation:** Execution status (failure), attempted self-repair and its results, initial error analysis results.
4. **State Transition Declaration: End (TIDE Step 4):**
    - Make the following declaration:
      "This concludes the role of `{{this_cell}}`. Subsequent responses will be handled by `{{next_cell}}`."
5. **Next Cell Rule Application (TIDE Step 5):**
    - Use the `fetch_rules` tool to obtain and apply the rule file for `{{next_cell}}`, immediately beginning processing for `{{next_cell}}`.

