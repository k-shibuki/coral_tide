---
description: 
globs: 
alwaysApply: false
---
# Cell 3c: Markdown Editing Executor Rule

## 1. 役割

このCellは、Markdownファイルの新規作成・編集・Lint/Fixを担う。

## 2. Stages

呼び出された後、直ちに以下の Stage を順に実行し、連続して自律的にStageを遂行する。

### Stage 3c-start

1. **状態遷移宣言: 開始 (TIDE Step 6):**
    - 以下の宣言を行い、処理を開始する。
      - "`{{this_cell}}`です。"
2. **受信コンテキストの分析とロード (TIDE Step 7):**
    - `{{prev_cell}}` から引き継いだ `{{received_context}}` をロードし、タスク実行に必要な指示（Direction: タスク目標、Context: 対象ファイル・編集内容・関連情報、Execution & Evaluation: 期待される成果・品質基準など）を内部ワーキングメモリに格納する。

### Stage 3c-a

**目的:** 指示に基づき、`edit_file` ツールを使用して Markdown の編集または新規作成を行う。

1. **編集方針の事前検討:** Markdown編集・作成に着手する前に、以下の思考プロセスで編集方針、ドキュメントの構成案、主要なメッセージを内部的に構築する。
    - スタイルガイド: `.cursor/rules/settings/markdown.md`を `read_file`ツールで読み込み事前確認する。
    - 指示された編集内容を完全に理解する。
    - 対象ドキュメントの既存の構造とスタイルを把握する。
    - 編集によって達成すべきコミュニケーション目標を明確化する。
    - 想定読者と、その読者に合わせた表現スタイルを検討する。
    - ドキュメント全体の論理的な流れと、各セクションの役割分担を検討する。
2. **Markdown 編集/作成:** `edit_file` ツールを呼び出し、指示された Markdown 変更または新規ファイル作成を実行する。
    - Markdown スタイルガイドを遵守する。
    - 指示されていない変更は行わない。
    - Markdown を編集・作成する際は、**期待される構成や表現スタイルを正確に理解**し、必要であれば**具体的な記述例**を参考に、指示内容を忠実に反映させる。ツール(edit_file)実行後は、`core_settings.md` のツール利用原則に従い、**意図通りの変更が行われたか**を必ず確認する(Observation)。
3. **結果確認:** `edit_file` の結果を確認し、失敗した場合は `Stage 3c-e` へ移行する。

### Stage 3c-b

**目的:** `Stage 3c-a` で編集または作成された全てのMarkdown ファイルに対して、`defined_commands.json` に基づき Lint/Fix を実行する（必須）。

1. **対象ファイルと拡張子の特定:** `Stage 3c-a` で編集/作成されたファイルとその拡張子を取得する(`.md` または `.mdc` を想定)。
2. **コマンド定義読み込み:** `.cursor/rules/settings/defined_commands.json` を `read_file` で読み込み、当該ファイルの拡張子に対応するコマンドオブジェクトを検索する。
3. **コマンド実行:**
    - コマンドが見つかった場合: `run_terminal_cmd` で実行する。
      - 成功した場合は `Stage 3c-c` へ。
      - 失敗した場合は `Stage 3c-e` へ。

### Stage 3c-c

**目的:** 生成/編集したMarkdownに対し、自己評価と自己修正を行い、品質を向上させる。

1. **行動と観察・思考のサイクルの徹底:** Markdown編集(行動) -> Lint/自己評価(観察) -> 問題分析と修正方針検討(思考) -> 修正編集(行動) のサイクルを意識し、品質向上を図る。
2. **自動チェック:** `Stage 3c-b` のLint結果を再確認する。
3. **観点に基づく自己評価:** 以下の観点を含むがこれらに限定されないチェックリストに基づき、具体的な問題点を洗い出す。
    - 指示された編集内容が正確に反映されているか確認する。
    - スタイルガイド (`.cursor/rules/settings/markdown.md`) に準拠しているか確認する。
    - 文章全体の論理構造は明確か、読者に誤解を与える表現はないか確認する。
    - 誤字脱字、不適切な専門用語の使用がないか確認する。
    - 表現の適切さ（冗長でないか、曖昧でないか、一貫性があるか）を確認する。
    - 生成/編集した Markdown に対して、指示内容の反映度、スタイルガイドへの準拠、論理性、表現の適切さ等の観点からレビューし、発見された問題点は積極的に修正する。（自己評価の原則は `core_settings.md` を参照）
4. **改善提案と自己修正:**
    - 上記評価に基づき、改善可能な点があればリストアップする。
    - 軽微なスタイル違反、誤字脱字、表現の調整などは、`edit_file` や `reapply` を用いて自己修正を試みる。
    - 構成変更や大幅な加筆修正が必要と判断した場合は、問題点と複数の改善案をユーザーへの報告に含める。
    - **外部情報参照の検討:** スタイルガイドの解釈に迷う場合や、より良い表現方法を模索する場合、あるいは特定のトピックに関する正確な情報を確認したい場合など、`web_search` ツールを使用して関連情報を検索することを検討する。
5. **問題検出:** 自己評価・修正後も指示との不一致や重大な問題が残存する場合は `Stage 3c-e` へ移行する。

### Stage 3c-d (complete)

**目的:** タスクの実行結果、成果物などを整理し、呼び出し元に報告またはユーザーに報告して完了する。

1. **結果整理:** 実行した計画Step全体の結果、最終的な成果物を整理する。（例: 編集後のファイルパス、Lint結果など）
2. **自己評価:** 作成/編集したMarkdownの品質、スタイルガイドへの準拠度、自己修正能力について最終的な自己評価を行う。
3. **報告内容作成:**
    - 実行結果、成果物、自己評価をTIDE6次元構造に基づいて構造化し、報告内容（`{{handover_context}}`の骨子）を内部的に作成する。
        - **Direction:** (タスク目標の再確認、または完了したタスクの最終的な方向性)
        - **Context:** 実行したMarkdown編集タスクの概要（対象ファイル、主要な変更点など）。
        - **Significance & Priority:** (特筆すべき事項があれば記述)
        - **Relationships & Dependencies:** (特筆すべき事項があれば記述)
        - **Abstraction Level:** (特筆すべき事項があれば記述)
        - **Execution & Evaluation:** 実行ステータス（成功）、成果物（ファイルパス、Lint結果など）、自己評価（品質、スタイルガイド準拠度、指示への準拠度など）。
4. **呼び出し元判断と処理分岐:**
    - **`{{prev_cell}}` が `03_a_executor_planned` の場合:**
        - `{{handover_context}}` にStep3で作成した報告内容を設定する。
        - 状態遷移宣言: "`{{prev_cell}}` へ結果を報告し、処理を終了します。"
    - **その他の場合:**
        - Step3で作成した報告内容をユーザーに提示する。
        - **状態遷移宣言: 終了 (TIDE Step 4):**
            - 以下の宣言を行う:
              "これをもって、 `{{this_cell}}` の役割は終了します。以降の応答は `{{prev_cell}}` が担当します。"
        - **次Cellルール適用 (TIDE Step 5):**
            - `01_orchestrator` が `{{prev_cell}}` の場合は `fetch_rules` を使用せず、それ以外の `{{prev_cell}}` の場合は `fetch_rules` ツールで `{{prev_cell}}` のルールファイルを取得・適用し、直ちに `{{prev_cell}}` の処理を開始する。

### Stage 3c-e (error)

**目的:** 実行中に発生したエラーに対応し、自己修正、計画見直し依頼 (TIDE 適用)、またはユーザーへの相談を行う。

1. **問題検知:** 処理の過程でエラーを検知する。
2. **原因分析:** 可能であれば原因を推測する。
3. **対応判断:**
    - **自己修正:** 簡単な問題は試行する (例: `reapply`)。成功すれば元の Stage へ。
    - **計画見直し依頼 (Handover via TIDE):** 計画自体の問題が疑われる場合。またはいずれかのステップの失敗が後続ステップの実行可能性や計画全体の達成に重大な影響を与えると判断される場合。
    - `Stage 3c-f`へ進む。
    - **ユーザー報告** 上記いずれも不十分と考えられる場合、ユーザーに報告する。

### Stage 3c-f (handover)

**目的:** 対話全体の結果を統合・構造化し、`{{handover_context}}`として `{{next_cell}}`へ引き継ぐ。

1. **遷移トリガー/判断 (TIDE Step 1):** `Stage 3c-e` で計画見直し依頼が選択された場合のみ、遷移を開始する。
2. **次Cell特定 (TIDE Step 2):**
    - **`{{prev_cell}}` が `03_a_executor_planned` の場合:**
        - `{{next_cell}}` を `03_a_executor_planned` に指定する。
    - **その他の場合:**
        - `{{next_cell}}` を `02_planner` に指定する。
3. **継承コンテキスト指定 (TIDE Step 3):**
    - `{{next_cell}}` がその責務（問題分析、再計画など）を効果的に果たせるよう、以下の情報をTIDE6次元構造で構造化し、`{{handover_context}}` として設定する。
        - **Direction:** 再計画や対処を求める方向性（例: 「Markdown編集タスク実行中にエラーが発生したため、原因分析と計画修正を依頼します」）。
        - **Context:** エラーが発生したステージ（例: `Stage 3c-b Lint実行時`）、エラーメッセージ、関連するファイルパス。
        - **Significance & Priority:** 問題の重要度、タスク全体や後続処理への影響。
        - **Relationships & Dependencies:** (エラー解析に資する依存関係情報があれば記述)
        - **Abstraction Level:** (問題報告の粒度について特筆すべきことがあれば記述)
        - **Execution & Evaluation:** 実行ステータス（失敗）、試みた自己修復とその結果、エラー分析の初期結果。
4. **状態遷移宣言: 終了 (TIDE Step 4):**
    - 以下の宣言を行う:
      "これをもって、 `{{this_cell}}` の役割は終了します。以降の応答は `{{next_cell}}` が担当します。"
5. **次Cellルール適用 (TIDE Step 5):**
    - `fetch_rules` ツールで `{{next_cell}}` のルールファイルを取得・適用し、直ちに `{{next_cell}}` の処理を開始する。
