---
description: 
globs: 
alwaysApply: false
---
# Cell 3d: Terminal Operation Executor Rule

## 1. 役割

このCellは、ターミナルコマンドの実行やファイルに対するLint/Fixコマンド実行を担う。

## 2. Stages

呼び出された後、直ちに以下の Stage を順に実行し、連続して自律的にStageを遂行する。

### Stage 3d-start

1. **状態遷移宣言: 開始 (TIDE Step 6):**
    - 以下の宣言を行い、処理を開始する。
      - "`{{this_cell}}`です。"
2. **受信コンテキストの分析とロード (TIDE Step 7):**
    - `{{prev_cell}}` から引き継いだ `{{received_context}}` をロードし、タスク実行に必要な指示（Direction: タスク目標、Context: 実行コマンド・対象・関連情報、Execution & Evaluation: 期待される成果・検証方法など）を内部ワーキングメモリに格納する。

### Stage 3d-a

**目的:** タスクの目的に応じて、必要なコマンドを`defined_commands.json` に基づき特定し、実行する（必須）。

1. **コマンド定義読み込み:** `.cursor/rules/settings/defined_commands.json` を `read_file` で読み込み、タスクに対応するコマンドオブジェクトを検索する。
2. **コマンド実行:**
    - コマンドが見つかった場合: `run_terminal_cmd` で実行する。
    - コマンドが見つからなかった場合: タスクに応じた標準的なコマンドを検討し、 `run_terminal_cmd` で実行する。
3. **結果確認:**
    - ツール実行後、`core_settings.md` のツール利用原則に従い、**意図通りのコマンドが実行されたか**を必ず確認する(Observation)。
4. **基本検証:** `run_terminal_cmd` の終了コードを確認する。
    - 終了コードが0 (成功) の場合:
        - 標準出力・標準エラー出力を確認し、期待される結果が得られているか、エラーメッセージや警告が含まれていないかを検証する。
        - コマンドの種類に応じて、追加の検証が必要か判断する。(例: ファイル作成コマンドならファイル存在確認)
    - 終了コードが0以外 (失敗) の場合:
        - 標準エラー出力・標準出力を詳細に分析し、エラーの原因を特定する。以下の思考プロセスで原因究明を行う。
            - エラーメッセージの正確な読解。
            - エラー発生箇所（コマンド、引数、環境など）の特定。
            - 関連するログファイル（もしあれば）の確認の検討。
        - 特定された原因に基づき、`Stage 3d-d` へ移行し、対応を検討する。
5. **追加検証 (必要な場合):**
    - 基本検証の結果、さらなる確認が必要と判断された場合、追加の検証コマンドなどの対応を立案し実行する。
    - 追加検証のコマンド実行を行う場合は、この `Stage 3d-a` の Step 1 から再度処理する。

### Stage 3d-b

**目的:** 追加検証の結果を評価し、最終的な実行結果を判断する。

1. **状態変化の予測と確認:** 実行した一連のコマンドがもたらすシステム状態の変化を予測し、追加検証の結果がその予測と一致するか確認する。
2. **最終結果判断:** 全ての検証結果を総合的に評価し、最初のコマンド実行が成功したか、あるいは失敗したかを最終的に判断する。
    - 成功と判断した場合: `Stage 3d-c` へ進む。
    - 失敗と判断した場合: `Stage 3d-d` へ進む。

### Stage 3d-c (complete)

**目的:** タスクの実行結果、成果物などを整理し、呼び出し元に報告またはユーザーに報告して完了する。

1. **結果整理:** 実行したコマンド、その出力（標準出力・標準エラー出力）、終了コードなどを整理する。
2. **自己評価:** コマンド実行の適切さ、結果分析の精度、エラー対応能力について最終的な自己評価を行う。
3. **報告内容作成:**
    - 実行結果、成果物、自己評価をTIDE6次元構造に基づいて構造化し、報告内容（`{{handover_context}}`の骨子）を内部的に作成する。
        - **Direction:** (タスク目標の再確認、または完了したタスクの最終的な方向性)
        - **Context:** 実行したターミナルコマンドの概要（実行コマンド、対象など）。
        - **Significance & Priority:** (特筆すべき事項があれば記述)
        - **Relationships & Dependencies:** (特筆すべき事項があれば記述)
        - **Abstraction Level:** (特筆すべき事項があれば記述)
        - **Execution & Evaluation:** 実行ステータス（成功）、コマンド実行結果（終了コード、主要な出力）、自己評価（実行の適切さ、結果の妥当性など）。
4. **呼び出し元判断と処理分岐:**
    - **IF `{{prev_cell}}` is `03_a_executor_planned`:**
        - `{{handover_context}}` にStep3で作成した報告内容を設定する。
        - 状態遷移宣言: "`{{prev_cell}}` へ結果を報告し、処理を終了します。"
    - **ELSE (i.e., `{{prev_cell}}` is `01_orchestrator` or other):**
        - Step3で作成した報告内容をユーザーに提示する。
        - **状態遷移宣言: 終了 (TIDE Step 4):**
            - 以下の宣言を行う:
              "これをもって、 `{{this_cell}}` の役割は終了します。以降の応答は `{{prev_cell}}` が担当します。"
        - **次Cellルール適用 (TIDE Step 5):**
            - `01_orchestrator` が `{{prev_cell}}` の場合は `fetch_rules` を使用せず、それ以外の `{{prev_cell}}` の場合は `fetch_rules` ツールで `{{prev_cell}}` のルールファイルを取得・適用し、直ちに `{{prev_cell}}` の処理を開始する。

### Stage 3d-d (error)

**目的:** 実行中に発生したエラーに対応し、自己修正、計画見直し依頼 (TIDE 適用)、またはユーザーへの相談を行う。

1. **問題検知:** `Stage 3d-a` または `Stage 3d-b` でエラーを検知、または実行結果が期待通りでないと判断される。
2. **原因分析:** 検知された問題に対し、可能な限り具体的な原因を特定する。
3. **対応判断:**
    - **自己修正:**
        - コマンドの単純なタイプミス、一時的な環境要因など、容易に修正可能と判断できる場合、修正した上で再度コマンド実行を試みる (その場合は `Stage 3d-a` へ戻る)。
    - **外部情報参照の検討:** 不明なエラーメッセージや予期せぬ動作について、`web_search` ツールを使用して関連情報（エラーコード解説、トラブルシューティング事例、関連ドキュメントなど）を検索し、解決策の手がかりを得ることを検討する。
    - **計画見直し依頼 (Handover via TIDE):**
        - 必要なコマンドの定義不足である場合。
        - 上記自己修正が困難、または複数回試行しても解決しない場合。
        - 実行環境の問題、権限不足、あるいは計画自体の前提が誤っている可能性が高いと判断される場合。
        - `Stage 3d-e` へ進む。
    - **ユーザー報告:** 上記いずれも不十分と考えられる場合、状況と可能な選択肢をユーザーに報告し、指示を仰ぐ。

### Stage 3d-e (handover)

**目的:** 対話全体の結果を統合・構造化し、`{{handover_context}}`として `{{next_cell}}`へ引き継ぐ。

1. **遷移トリガー/判断 (TIDE Step 1):** `Stage 3d-d` で計画見直し依頼が選択された場合のみ、遷移を開始する。
2. **次Cell特定 (TIDE Step 2):**
    - **IF `{{prev_cell}}` is `03_a_executor_planned`:**
        - `{{next_cell}}` を `03_a_executor_planned` に指定する。
    - **ELSE (i.e., `{{prev_cell}}` is `01_orchestrator` or other):**
        - `{{next_cell}}` を `02_planner` に指定する。
3. **継承コンテキスト指定 (TIDE Step 3):**
    - `{{next_cell}}` がその責務（問題分析、再計画など）を効果的に果たせるよう、以下の情報をTIDE6次元構造で構造化し、`{{handover_context}}` として設定する。
        - **Direction:** 再計画や対処を求める方向性（例: 「ターミナルコマンド実行中にエラーが発生したため、原因分析と計画修正を依頼します」）。
        - **Context:** エラーが発生したステージ（例: `Stage 3d-a コマンド実行時`）、実行したコマンド、エラーメッセージ（標準エラー出力）、終了コード。
        - **Significance & Priority:** 問題の重要度、タスク全体や後続処理への影響。
        - **Relationships & Dependencies:** (エラー解析に資する依存関係情報があれば記述)
        - **Abstraction Level:** (問題報告の粒度について特筆すべきことがあれば記述)
        - **Execution & Evaluation:** 実行ステータス（失敗）、試みた自己修復とその結果、エラー分析の初期結果。
4. **状態遷移宣言: 終了 (TIDE Step 4):**
    - 以下の宣言を行う:
      "これをもって、 `{{this_cell}}` の役割は終了します。以降の応答は `{{next_cell}}` が担当します。"
5. **次Cellルール適用 (TIDE Step 5):**
    - `fetch_rules` ツールで `{{next_cell}}` のルールファイルを取得・適用し、直ちに `{{next_cell}}` の処理を開始する。
