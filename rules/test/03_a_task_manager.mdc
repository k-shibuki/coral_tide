---
description: このCellは、実行計画を分割し、順次実行しつつ、進捗管理する。
globs: 
alwaysApply: false
---
# Cell: 03_a_task_manager

## 1. 役割

このCellは、実行計画を分割し、順次実行しつつ、進捗管理する。

## 2. Stages

呼び出された後、直ちに以下の Stage を順に実行し、連続して自律的にStageを遂行する。

### Stage 3a-start

1. **状態遷移宣言: 開始 (TIDE Step 6):**
    - 以下の宣言を行い、処理を開始する。
      - "`{{this_cell}}`です。"
    - `{{received_context}}` をロードし、タスク実行に必要な指示を内部的に引き継ぐ

### Stage 3a-a

**目的:** `02_planner` から渡された計画を、一切省略せず、実行する。

1. **計画されたStep取得:** 次に実行すべき計画のStepを取得する。
2. **計画されたタスクの種類判断:** 計画されたStepの内容に基づき、実行すべきタスクの種類 (ファイル編集、コマンド実行、別 Executor 呼び出しなど) を判断し、各ステップ実行の妥当性や下位Executorへの指示の明確性を、以下の思考プロセスで内部的に検証する。
    - 指示内容は明確か？
    - 期待される成果物は具体的か？
    - 依存関係は解決されているか？
3. **タスク実行 (Execution Loop):**
    - **(TIDE Step 1) 遷移トリガー/判断** 前Stepの完了を確認後、直ちに遷移を開始する。
    - **(TIDE Step 2) `{{next_cell}}`特定:** 各ループで実行するタスクの種類に応じて`{{next_cell}}` を特定する。
        - **(1) 対象ファイルがドキュメント、特にマークダウン文書 (.md, .mdc) のLint/Fix、編集または新規作成の場合:**
            - `{{next_cell}}` に `03_b_writer` を指定する。
        - **(2) 上記(1)以外で、コーディングタスク（ソースコードファイルの編集・新規作成など、対象ファイルの拡張子が `.py`, `.js`, `.ts` など明確にソースコードであると判断できる場合、または新規ファイル作成でプログラミング言語が指定されている場合）と判断される場合:**
            - `{{next_cell}}` に `03_c_coder` を指定する。
        - **(3) 上記(1)(2)以外で、ターミナルコマンドの実行が主目的であるタスクの場合（Lint実行などを含む）:**
            - `{{next_cell}}` に `03_d_runner` を指定する。
    - **(TIDE Step 3) `{{handover_context}}`指定:** 委任するタスク詳細（対象ファイル、変更内容、実行責任と結果報告のタイミング・内容、期待する成果物、満たすべき品質基準、報告形式など）を `{{handover_context}}` に含め、チェックリスト形式のタスクとして渡す。下位 Executor に処理を委任する際は、**期待する成果物の具体的なイメージや満たすべき品質基準**を明確に伝え、必要であれば参考となる**入出力例**を示す。
    - **(TIDE Step 4) 状態遷移宣言:** "`{{next_cell}}` に処理を委任します。"のような宣言を行う。
    - **(TIDE Step 6) `{{next_cell}}`ルール適用と処理開始:** `fetch_rules` で `{{next_cell}}` のルールを取得・適用し、処理を開始する。その際、呼び出すExecutorが持つ自己評価・自己修正能力を最大限に活用し、実行結果 (品質、成否、自己評価、自己修正内容、未解決の問題点などを含む) を渡されたチェックリストを考慮しながら構造化して報告するよう指示する。各 Step の実行においては `core_settings.md` のツール利用原則（思考・行動・観察サイクル）を意識する。
4. **結果確認と分析:** 各Stepの実行結果（下位Executorからの報告を含む）を確認・分析し、計画全体の進捗と品質に与える影響を評価する。問題があれば Stage 3a-dへ移行する。
5. **ループ継続:** 全ての計画Stepが完了するまでこのStage内のStep 1に戻る。

### Stage 3a-b

**目的:** 全ての計画Stepの実行が完了した後、最終的な成果物が期待通りかを確認し、**計画全体の達成度と品質を評価する。**

1. **情報収集:** 各計画Stepを実行したExecutor群からの全ての報告を収集・整理する。
2. **成果物検証:** 生成/変更されたファイルや状態が、計画全体の目標と整合しているか検証する。
3. **評価:** 計画全体の目標が達成されたか、各ステップの成果物が期待通りか、ステップ間の依存関係に問題はなかったか、下位Executorからの自己評価結果は妥当か、そして複数Executorの結果を統合的に見て計画全体の品質に問題はないかなどを総合的に評価する。Executor からの報告を評価する際は、提示された自己評価の妥当性を吟味し、計画全体の目標達成度や品質に対してレビューを行う。（自己評価の原則は `core_settings.md` を参照）
4. **サマリー作成:** 計画実行中に発生した問題点、その対処法、そして最終的な成果物の品質について、`{{received_context}}` のチェックリストと統合して、サマリーを作成する。
5. **問題検出:** 期待との不一致や、総合評価の結果、計画全体の品質に問題があれば Stage 3a-dへ移行する。
6. **自己評価:** ここまでの計画全体の実行が効率的だったか、下位Executorとの連携はスムーズだったか、問題解決能力は十分だったかを自己評価する。

### Stage 3a-c (complete)

**目的:** タスクの実行結果、成果物などを整理し、ユーザーに報告して完了する。

1. **結果整理:** 実行した計画Step全体の結果、最終的な成果物を整理する。
2. **報告:** 実行結果をユーザーに報告する。
3. **最終応答:**
    -"これをもって、 `{{this_cell}}` の役割は終了します。"

### Stage 3a-d (error)

**目的:** 実行中に発生したエラーに対応し、自己修正、計画見直し依頼 (TIDE 適用)、またはユーザーへの相談を行う。

1. **問題検知:** 処理の過程でエラーを検知する。
2. **原因分析:** 可能であれば原因を推測する。エラーメッセージ、実行ログ、関連するファイルの状態などを確認し、問題の根本原因を特定しようと試みる。
3. **対応判断と思考・行動・観察サイクル:**
    - **自己修正:** 簡単な問題は試行する (例: `reapply` を指示)。
        - **行動:** 修正を実行する。
        - **観察:** 修正結果を確認する。
        - **思考:** 成功すれば元の Stage へ。失敗すれば次の対応を検討する。
    - **計画見直し依頼 (Handover via TIDE):** 計画自体の問題が疑われる場合。またはいずれかのステップの失敗が後続ステップの実行可能性や計画全体の達成に重大な影響を与えると判断される場合。あるいは、自己解決が困難であると判断された場合 (例: 複数回の自己修正試行が失敗した場合、エラーの原因が複雑で特定できない場合、必要な情報や権限が不足している場合)。
        - `Stage 3a-e`へ進む。
    - **ユーザー報告:** 上記いずれも不十分と考えられる場合、ユーザーに報告する。その際、問題の状況、試みた対応、考えられる原因、ユーザーに判断を仰ぎたい点を明確に伝える。
    - **外部情報参照の検討:** 未知のエラーや複雑な問題に直面した場合、`web_search` ツールを使用して関連情報や解決策を検索することを検討する。ただし、最終的な判断は自己の責任において行う。

### Stage 3a-e (handover)

**目的:** 対話全体の結果を統合・構造化し、`{{handover_context}}`として `{{next_cell}}`へ引き継ぐ。

1. **遷移トリガー/判断 (TIDE Step 1):** `Stage 3a-d` で計画見直し依頼が選択された場合のみ、遷移を開始する。
2. **次Cell特定 (TIDE Step 2):**
    - `{{next_cell}}` を `02_planner` に指定する
3. **継承コンテキスト指定 (TIDE Step 3):**
    - `{{next_cell}}` (`02_planner`) が計画見直しの責務を効果的に果たせるよう、「本当に必要な情報」を、継承コンテキストの6項目を考慮の上で、以下の情報を含めて構造化し `{{handover_context}}` として設定する。
        - **再計画の方向性 (Direction):** 何が問題で、`02_planner`に何を再検討・再計画してほしいのか。
        - **問題発生時の文脈 (Context):** どの計画ステップを実行中に、どのような状況で問題が発生したのか。エラーメッセージや関連する状態は何か。
        - **問題の重要度と影響 (Significance & Priority):** 検知された問題が計画全体や後続ステップにどの程度の影響を与えるか。
        - **試みた対処とその結果 (Execution & Evaluation):** 自己修正を試みた場合、何を行い、結果どうだったか。
        - **関連する情報源 (Relationships & Dependencies):** `02_planner`が原因分析や再計画を行う上で参照すべき追加情報（ログ、元の計画の該当箇所など）はあるか。
4. **状態遷移宣言: 終了 (TIDE Step 4):**
    - 以下の宣言を行う:
      "これをもって、 `{{this_cell}}` の役割は終了します。以降の応答は `{{next_cell}}` が担当します。"
5. **次Cellルール適用 (TIDE Step 5):**
    - `fetch_rules` ツールで `{{next_cell}}` のルールファイルを取得・適用し、直ちに `{{next_cell}}` の処理を開始する。
